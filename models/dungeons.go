// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Dungeon is an object representing the database table.
type Dungeon struct {
	X        int `boil:"x" json:"x" toml:"x" yaml:"x"`
	Y        int `boil:"y" json:"y" toml:"y" yaml:"y"`
	Type     int `boil:"type" json:"type" toml:"type" yaml:"type"`
	Level    int `boil:"level" json:"level" toml:"level" yaml:"level"`
	Progress int `boil:"progress" json:"progress" toml:"progress" yaml:"progress"`

	R *dungeonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dungeonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DungeonColumns = struct {
	X        string
	Y        string
	Type     string
	Level    string
	Progress string
}{
	X:        "x",
	Y:        "y",
	Type:     "type",
	Level:    "level",
	Progress: "progress",
}

// DungeonRels is where relationship names are stored.
var DungeonRels = struct {
}{}

// dungeonR is where relationships are stored.
type dungeonR struct {
}

// NewStruct creates a new relationship struct
func (*dungeonR) NewStruct() *dungeonR {
	return &dungeonR{}
}

// dungeonL is where Load methods for each relationship are stored.
type dungeonL struct{}

var (
	dungeonColumns               = []string{"x", "y", "type", "level", "progress"}
	dungeonColumnsWithoutDefault = []string{"x", "y", "type"}
	dungeonColumnsWithDefault    = []string{"level", "progress"}
	dungeonPrimaryKeyColumns     = []string{"x", "y"}
)

type (
	// DungeonSlice is an alias for a slice of pointers to Dungeon.
	// This should generally be used opposed to []Dungeon.
	DungeonSlice []*Dungeon
	// DungeonHook is the signature for custom Dungeon hook methods
	DungeonHook func(context.Context, boil.ContextExecutor, *Dungeon) error

	dungeonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dungeonType                 = reflect.TypeOf(&Dungeon{})
	dungeonMapping              = queries.MakeStructMapping(dungeonType)
	dungeonPrimaryKeyMapping, _ = queries.BindMapping(dungeonType, dungeonMapping, dungeonPrimaryKeyColumns)
	dungeonInsertCacheMut       sync.RWMutex
	dungeonInsertCache          = make(map[string]insertCache)
	dungeonUpdateCacheMut       sync.RWMutex
	dungeonUpdateCache          = make(map[string]updateCache)
	dungeonUpsertCacheMut       sync.RWMutex
	dungeonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var dungeonBeforeInsertHooks []DungeonHook
var dungeonBeforeUpdateHooks []DungeonHook
var dungeonBeforeDeleteHooks []DungeonHook
var dungeonBeforeUpsertHooks []DungeonHook

var dungeonAfterInsertHooks []DungeonHook
var dungeonAfterSelectHooks []DungeonHook
var dungeonAfterUpdateHooks []DungeonHook
var dungeonAfterDeleteHooks []DungeonHook
var dungeonAfterUpsertHooks []DungeonHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Dungeon) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dungeonBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Dungeon) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dungeonBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Dungeon) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dungeonBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Dungeon) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dungeonBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Dungeon) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dungeonAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Dungeon) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dungeonAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Dungeon) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dungeonAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Dungeon) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dungeonAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Dungeon) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range dungeonAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDungeonHook registers your hook function for all future operations.
func AddDungeonHook(hookPoint boil.HookPoint, dungeonHook DungeonHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		dungeonBeforeInsertHooks = append(dungeonBeforeInsertHooks, dungeonHook)
	case boil.BeforeUpdateHook:
		dungeonBeforeUpdateHooks = append(dungeonBeforeUpdateHooks, dungeonHook)
	case boil.BeforeDeleteHook:
		dungeonBeforeDeleteHooks = append(dungeonBeforeDeleteHooks, dungeonHook)
	case boil.BeforeUpsertHook:
		dungeonBeforeUpsertHooks = append(dungeonBeforeUpsertHooks, dungeonHook)
	case boil.AfterInsertHook:
		dungeonAfterInsertHooks = append(dungeonAfterInsertHooks, dungeonHook)
	case boil.AfterSelectHook:
		dungeonAfterSelectHooks = append(dungeonAfterSelectHooks, dungeonHook)
	case boil.AfterUpdateHook:
		dungeonAfterUpdateHooks = append(dungeonAfterUpdateHooks, dungeonHook)
	case boil.AfterDeleteHook:
		dungeonAfterDeleteHooks = append(dungeonAfterDeleteHooks, dungeonHook)
	case boil.AfterUpsertHook:
		dungeonAfterUpsertHooks = append(dungeonAfterUpsertHooks, dungeonHook)
	}
}

// One returns a single dungeon record from the query.
func (q dungeonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Dungeon, error) {
	o := &Dungeon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for dungeons")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Dungeon records from the query.
func (q dungeonQuery) All(ctx context.Context, exec boil.ContextExecutor) (DungeonSlice, error) {
	var o []*Dungeon

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Dungeon slice")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Dungeon records in the query.
func (q dungeonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count dungeons rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dungeonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if dungeons exists")
	}

	return count > 0, nil
}

// Dungeons retrieves all the records using an executor.
func Dungeons(mods ...qm.QueryMod) dungeonQuery {
	mods = append(mods, qm.From("\"dungeons\""))
	return dungeonQuery{NewQuery(mods...)}
}

// FindDungeon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDungeon(ctx context.Context, exec boil.ContextExecutor, x int, y int, selectCols ...string) (*Dungeon, error) {
	dungeonObj := &Dungeon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"dungeons\" where \"x\"=$1 AND \"y\"=$2", sel,
	)

	q := queries.Raw(query, x, y)

	err := q.Bind(ctx, exec, dungeonObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from dungeons")
	}

	return dungeonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Dungeon) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dungeons provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dungeonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dungeonInsertCacheMut.RLock()
	cache, cached := dungeonInsertCache[key]
	dungeonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dungeonColumns,
			dungeonColumnsWithDefault,
			dungeonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dungeonType, dungeonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dungeonType, dungeonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"dungeons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"dungeons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into dungeons")
	}

	if !cached {
		dungeonInsertCacheMut.Lock()
		dungeonInsertCache[key] = cache
		dungeonInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Dungeon.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Dungeon) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	dungeonUpdateCacheMut.RLock()
	cache, cached := dungeonUpdateCache[key]
	dungeonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dungeonColumns,
			dungeonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update dungeons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"dungeons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dungeonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dungeonType, dungeonMapping, append(wl, dungeonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update dungeons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for dungeons")
	}

	if !cached {
		dungeonUpdateCacheMut.Lock()
		dungeonUpdateCache[key] = cache
		dungeonUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q dungeonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for dungeons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for dungeons")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DungeonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dungeonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"dungeons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dungeonPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dungeon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dungeon")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Dungeon) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no dungeons provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(dungeonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dungeonUpsertCacheMut.RLock()
	cache, cached := dungeonUpsertCache[key]
	dungeonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dungeonColumns,
			dungeonColumnsWithDefault,
			dungeonColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dungeonColumns,
			dungeonPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert dungeons, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dungeonPrimaryKeyColumns))
			copy(conflict, dungeonPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"dungeons\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dungeonType, dungeonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dungeonType, dungeonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert dungeons")
	}

	if !cached {
		dungeonUpsertCacheMut.Lock()
		dungeonUpsertCache[key] = cache
		dungeonUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Dungeon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Dungeon) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Dungeon provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dungeonPrimaryKeyMapping)
	sql := "DELETE FROM \"dungeons\" WHERE \"x\"=$1 AND \"y\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from dungeons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for dungeons")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dungeonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dungeonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dungeons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dungeons")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DungeonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Dungeon slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(dungeonBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dungeonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"dungeons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dungeonPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dungeon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for dungeons")
	}

	if len(dungeonAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Dungeon) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDungeon(ctx, exec, o.X, o.Y)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DungeonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DungeonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dungeonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"dungeons\".* FROM \"dungeons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dungeonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DungeonSlice")
	}

	*o = slice

	return nil
}

// DungeonExists checks if the Dungeon row exists.
func DungeonExists(ctx context.Context, exec boil.ContextExecutor, x int, y int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"dungeons\" where \"x\"=$1 AND \"y\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, x, y)
	}

	row := exec.QueryRowContext(ctx, sql, x, y)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if dungeons exists")
	}

	return exists, nil
}
