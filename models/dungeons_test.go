// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDungeons(t *testing.T) {
	t.Parallel()

	query := Dungeons()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDungeonsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dungeon{}
	if err = randomize.Struct(seed, o, dungeonDBTypes, true, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Dungeons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDungeonsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dungeon{}
	if err = randomize.Struct(seed, o, dungeonDBTypes, true, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Dungeons().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Dungeons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDungeonsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dungeon{}
	if err = randomize.Struct(seed, o, dungeonDBTypes, true, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DungeonSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Dungeons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDungeonsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dungeon{}
	if err = randomize.Struct(seed, o, dungeonDBTypes, true, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DungeonExists(ctx, tx, o.X, o.Y)
	if err != nil {
		t.Errorf("Unable to check if Dungeon exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DungeonExists to return true, but got false.")
	}
}

func testDungeonsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dungeon{}
	if err = randomize.Struct(seed, o, dungeonDBTypes, true, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	dungeonFound, err := FindDungeon(ctx, tx, o.X, o.Y)
	if err != nil {
		t.Error(err)
	}

	if dungeonFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDungeonsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dungeon{}
	if err = randomize.Struct(seed, o, dungeonDBTypes, true, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Dungeons().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDungeonsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dungeon{}
	if err = randomize.Struct(seed, o, dungeonDBTypes, true, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Dungeons().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDungeonsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	dungeonOne := &Dungeon{}
	dungeonTwo := &Dungeon{}
	if err = randomize.Struct(seed, dungeonOne, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}
	if err = randomize.Struct(seed, dungeonTwo, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dungeonOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dungeonTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Dungeons().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDungeonsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	dungeonOne := &Dungeon{}
	dungeonTwo := &Dungeon{}
	if err = randomize.Struct(seed, dungeonOne, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}
	if err = randomize.Struct(seed, dungeonTwo, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = dungeonOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = dungeonTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Dungeons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func dungeonBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Dungeon) error {
	*o = Dungeon{}
	return nil
}

func dungeonAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Dungeon) error {
	*o = Dungeon{}
	return nil
}

func dungeonAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Dungeon) error {
	*o = Dungeon{}
	return nil
}

func dungeonBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Dungeon) error {
	*o = Dungeon{}
	return nil
}

func dungeonAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Dungeon) error {
	*o = Dungeon{}
	return nil
}

func dungeonBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Dungeon) error {
	*o = Dungeon{}
	return nil
}

func dungeonAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Dungeon) error {
	*o = Dungeon{}
	return nil
}

func dungeonBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Dungeon) error {
	*o = Dungeon{}
	return nil
}

func dungeonAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Dungeon) error {
	*o = Dungeon{}
	return nil
}

func testDungeonsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Dungeon{}
	o := &Dungeon{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, dungeonDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Dungeon object: %s", err)
	}

	AddDungeonHook(boil.BeforeInsertHook, dungeonBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	dungeonBeforeInsertHooks = []DungeonHook{}

	AddDungeonHook(boil.AfterInsertHook, dungeonAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	dungeonAfterInsertHooks = []DungeonHook{}

	AddDungeonHook(boil.AfterSelectHook, dungeonAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	dungeonAfterSelectHooks = []DungeonHook{}

	AddDungeonHook(boil.BeforeUpdateHook, dungeonBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	dungeonBeforeUpdateHooks = []DungeonHook{}

	AddDungeonHook(boil.AfterUpdateHook, dungeonAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	dungeonAfterUpdateHooks = []DungeonHook{}

	AddDungeonHook(boil.BeforeDeleteHook, dungeonBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	dungeonBeforeDeleteHooks = []DungeonHook{}

	AddDungeonHook(boil.AfterDeleteHook, dungeonAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	dungeonAfterDeleteHooks = []DungeonHook{}

	AddDungeonHook(boil.BeforeUpsertHook, dungeonBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	dungeonBeforeUpsertHooks = []DungeonHook{}

	AddDungeonHook(boil.AfterUpsertHook, dungeonAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	dungeonAfterUpsertHooks = []DungeonHook{}
}

func testDungeonsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dungeon{}
	if err = randomize.Struct(seed, o, dungeonDBTypes, true, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Dungeons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDungeonsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dungeon{}
	if err = randomize.Struct(seed, o, dungeonDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(dungeonColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Dungeons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDungeonsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dungeon{}
	if err = randomize.Struct(seed, o, dungeonDBTypes, true, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDungeonsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dungeon{}
	if err = randomize.Struct(seed, o, dungeonDBTypes, true, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DungeonSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDungeonsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Dungeon{}
	if err = randomize.Struct(seed, o, dungeonDBTypes, true, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Dungeons().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	dungeonDBTypes = map[string]string{`Level`: `integer`, `Progress`: `integer`, `Type`: `integer`, `X`: `integer`, `Y`: `integer`}
	_              = bytes.MinRead
)

func testDungeonsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(dungeonPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(dungeonColumns) == len(dungeonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Dungeon{}
	if err = randomize.Struct(seed, o, dungeonDBTypes, true, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Dungeons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dungeonDBTypes, true, dungeonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDungeonsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(dungeonColumns) == len(dungeonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Dungeon{}
	if err = randomize.Struct(seed, o, dungeonDBTypes, true, dungeonColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Dungeons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, dungeonDBTypes, true, dungeonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(dungeonColumns, dungeonPrimaryKeyColumns) {
		fields = dungeonColumns
	} else {
		fields = strmangle.SetComplement(
			dungeonColumns,
			dungeonPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DungeonSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDungeonsUpsert(t *testing.T) {
	t.Parallel()

	if len(dungeonColumns) == len(dungeonPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Dungeon{}
	if err = randomize.Struct(seed, &o, dungeonDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Dungeon: %s", err)
	}

	count, err := Dungeons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, dungeonDBTypes, false, dungeonPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Dungeon struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Dungeon: %s", err)
	}

	count, err = Dungeons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
