// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// City is an object representing the database table.
type City struct {
	X               int         `boil:"x" json:"x" toml:"x" yaml:"x"`
	Y               int         `boil:"y" json:"y" toml:"y" yaml:"y"`
	Type            int         `boil:"type" json:"type" toml:"type" yaml:"type"`
	CreatedAt       time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UserName        null.String `boil:"user_name" json:"user_name,omitempty" toml:"user_name" yaml:"user_name,omitempty"`
	CityName        string      `boil:"city_name" json:"city_name" toml:"city_name" yaml:"city_name"`
	Points          int         `boil:"points" json:"points" toml:"points" yaml:"points"`
	WoodProduction  int         `boil:"wood_production" json:"wood_production" toml:"wood_production" yaml:"wood_production"`
	StoneProduction int         `boil:"stone_production" json:"stone_production" toml:"stone_production" yaml:"stone_production"`
	IronProduction  int         `boil:"iron_production" json:"iron_production" toml:"iron_production" yaml:"iron_production"`
	FoodProduction  int         `boil:"food_production" json:"food_production" toml:"food_production" yaml:"food_production"`
	GoldProduction  int         `boil:"gold_production" json:"gold_production" toml:"gold_production" yaml:"gold_production"`
	WoodStored      int         `boil:"wood_stored" json:"wood_stored" toml:"wood_stored" yaml:"wood_stored"`
	StoneStored     int         `boil:"stone_stored" json:"stone_stored" toml:"stone_stored" yaml:"stone_stored"`
	IronStored      int         `boil:"iron_stored" json:"iron_stored" toml:"iron_stored" yaml:"iron_stored"`
	FoodStored      int         `boil:"food_stored" json:"food_stored" toml:"food_stored" yaml:"food_stored"`
	WoodLimit       int         `boil:"wood_limit" json:"wood_limit" toml:"wood_limit" yaml:"wood_limit"`
	StoneLimit      int         `boil:"stone_limit" json:"stone_limit" toml:"stone_limit" yaml:"stone_limit"`
	IronLimit       int         `boil:"iron_limit" json:"iron_limit" toml:"iron_limit" yaml:"iron_limit"`
	FoodLimit       int         `boil:"food_limit" json:"food_limit" toml:"food_limit" yaml:"food_limit"`

	R *cityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CityColumns = struct {
	X               string
	Y               string
	Type            string
	CreatedAt       string
	UpdatedAt       string
	UserName        string
	CityName        string
	Points          string
	WoodProduction  string
	StoneProduction string
	IronProduction  string
	FoodProduction  string
	GoldProduction  string
	WoodStored      string
	StoneStored     string
	IronStored      string
	FoodStored      string
	WoodLimit       string
	StoneLimit      string
	IronLimit       string
	FoodLimit       string
}{
	X:               "x",
	Y:               "y",
	Type:            "type",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	UserName:        "user_name",
	CityName:        "city_name",
	Points:          "points",
	WoodProduction:  "wood_production",
	StoneProduction: "stone_production",
	IronProduction:  "iron_production",
	FoodProduction:  "food_production",
	GoldProduction:  "gold_production",
	WoodStored:      "wood_stored",
	StoneStored:     "stone_stored",
	IronStored:      "iron_stored",
	FoodStored:      "food_stored",
	WoodLimit:       "wood_limit",
	StoneLimit:      "stone_limit",
	IronLimit:       "iron_limit",
	FoodLimit:       "food_limit",
}

// CityRels is where relationship names are stored.
var CityRels = struct {
}{}

// cityR is where relationships are stored.
type cityR struct {
}

// NewStruct creates a new relationship struct
func (*cityR) NewStruct() *cityR {
	return &cityR{}
}

// cityL is where Load methods for each relationship are stored.
type cityL struct{}

var (
	cityColumns               = []string{"x", "y", "type", "created_at", "updated_at", "user_name", "city_name", "points", "wood_production", "stone_production", "iron_production", "food_production", "gold_production", "wood_stored", "stone_stored", "iron_stored", "food_stored", "wood_limit", "stone_limit", "iron_limit", "food_limit"}
	cityColumnsWithoutDefault = []string{"x", "y", "user_name"}
	cityColumnsWithDefault    = []string{"type", "created_at", "updated_at", "city_name", "points", "wood_production", "stone_production", "iron_production", "food_production", "gold_production", "wood_stored", "stone_stored", "iron_stored", "food_stored", "wood_limit", "stone_limit", "iron_limit", "food_limit"}
	cityPrimaryKeyColumns     = []string{"x", "y"}
)

type (
	// CitySlice is an alias for a slice of pointers to City.
	// This should generally be used opposed to []City.
	CitySlice []*City
	// CityHook is the signature for custom City hook methods
	CityHook func(context.Context, boil.ContextExecutor, *City) error

	cityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cityType                 = reflect.TypeOf(&City{})
	cityMapping              = queries.MakeStructMapping(cityType)
	cityPrimaryKeyMapping, _ = queries.BindMapping(cityType, cityMapping, cityPrimaryKeyColumns)
	cityInsertCacheMut       sync.RWMutex
	cityInsertCache          = make(map[string]insertCache)
	cityUpdateCacheMut       sync.RWMutex
	cityUpdateCache          = make(map[string]updateCache)
	cityUpsertCacheMut       sync.RWMutex
	cityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var cityBeforeInsertHooks []CityHook
var cityBeforeUpdateHooks []CityHook
var cityBeforeDeleteHooks []CityHook
var cityBeforeUpsertHooks []CityHook

var cityAfterInsertHooks []CityHook
var cityAfterSelectHooks []CityHook
var cityAfterUpdateHooks []CityHook
var cityAfterDeleteHooks []CityHook
var cityAfterUpsertHooks []CityHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *City) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range cityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *City) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range cityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *City) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range cityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *City) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range cityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *City) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range cityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *City) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range cityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *City) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range cityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *City) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range cityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *City) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range cityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCityHook registers your hook function for all future operations.
func AddCityHook(hookPoint boil.HookPoint, cityHook CityHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cityBeforeInsertHooks = append(cityBeforeInsertHooks, cityHook)
	case boil.BeforeUpdateHook:
		cityBeforeUpdateHooks = append(cityBeforeUpdateHooks, cityHook)
	case boil.BeforeDeleteHook:
		cityBeforeDeleteHooks = append(cityBeforeDeleteHooks, cityHook)
	case boil.BeforeUpsertHook:
		cityBeforeUpsertHooks = append(cityBeforeUpsertHooks, cityHook)
	case boil.AfterInsertHook:
		cityAfterInsertHooks = append(cityAfterInsertHooks, cityHook)
	case boil.AfterSelectHook:
		cityAfterSelectHooks = append(cityAfterSelectHooks, cityHook)
	case boil.AfterUpdateHook:
		cityAfterUpdateHooks = append(cityAfterUpdateHooks, cityHook)
	case boil.AfterDeleteHook:
		cityAfterDeleteHooks = append(cityAfterDeleteHooks, cityHook)
	case boil.AfterUpsertHook:
		cityAfterUpsertHooks = append(cityAfterUpsertHooks, cityHook)
	}
}

// One returns a single city record from the query.
func (q cityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*City, error) {
	o := &City{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cities")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all City records from the query.
func (q cityQuery) All(ctx context.Context, exec boil.ContextExecutor) (CitySlice, error) {
	var o []*City

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to City slice")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all City records in the query.
func (q cityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cities exists")
	}

	return count > 0, nil
}

// Cities retrieves all the records using an executor.
func Cities(mods ...qm.QueryMod) cityQuery {
	mods = append(mods, qm.From("\"cities\""))
	return cityQuery{NewQuery(mods...)}
}

// FindCity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCity(ctx context.Context, exec boil.ContextExecutor, x int, y int, selectCols ...string) (*City, error) {
	cityObj := &City{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cities\" where \"x\"=$1 AND \"y\"=$2", sel,
	)

	q := queries.Raw(query, x, y)

	err := q.Bind(ctx, exec, cityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cities")
	}

	return cityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *City) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cities provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cityInsertCacheMut.RLock()
	cache, cached := cityInsertCache[key]
	cityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cityColumns,
			cityColumnsWithDefault,
			cityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cityType, cityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cityType, cityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cities")
	}

	if !cached {
		cityInsertCacheMut.Lock()
		cityInsertCache[key] = cache
		cityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the City.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *City) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cityUpdateCacheMut.RLock()
	cache, cached := cityUpdateCache[key]
	cityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cityColumns,
			cityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cityType, cityMapping, append(wl, cityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cities")
	}

	if !cached {
		cityUpdateCacheMut.Lock()
		cityUpdateCache[key] = cache
		cityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CitySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cityPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in city slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all city")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *City) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cities provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cityUpsertCacheMut.RLock()
	cache, cached := cityUpsertCache[key]
	cityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cityColumns,
			cityColumnsWithDefault,
			cityColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cityColumns,
			cityPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert cities, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cityPrimaryKeyColumns))
			copy(conflict, cityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cities\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cityType, cityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cityType, cityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cities")
	}

	if !cached {
		cityUpsertCacheMut.Lock()
		cityUpsertCache[key] = cache
		cityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single City record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *City) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no City provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cityPrimaryKeyMapping)
	sql := "DELETE FROM \"cities\" WHERE \"x\"=$1 AND \"y\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cities")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CitySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no City slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(cityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cityPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from city slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cities")
	}

	if len(cityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *City) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCity(ctx, exec, o.X, o.Y)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CitySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cities\".* FROM \"cities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CitySlice")
	}

	*o = slice

	return nil
}

// CityExists checks if the City row exists.
func CityExists(ctx context.Context, exec boil.ContextExecutor, x int, y int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cities\" where \"x\"=$1 AND \"y\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, x, y)
	}

	row := exec.QueryRowContext(ctx, sql, x, y)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cities exists")
	}

	return exists, nil
}
