// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testConstructions(t *testing.T) {
	t.Parallel()

	query := Constructions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testConstructionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Construction{}
	if err = randomize.Struct(seed, o, constructionDBTypes, true, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Constructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testConstructionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Construction{}
	if err = randomize.Struct(seed, o, constructionDBTypes, true, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Constructions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Constructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testConstructionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Construction{}
	if err = randomize.Struct(seed, o, constructionDBTypes, true, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ConstructionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Constructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testConstructionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Construction{}
	if err = randomize.Struct(seed, o, constructionDBTypes, true, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ConstructionExists(ctx, tx, o.CityX, o.CityY, o.X, o.Y)
	if err != nil {
		t.Errorf("Unable to check if Construction exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ConstructionExists to return true, but got false.")
	}
}

func testConstructionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Construction{}
	if err = randomize.Struct(seed, o, constructionDBTypes, true, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	constructionFound, err := FindConstruction(ctx, tx, o.CityX, o.CityY, o.X, o.Y)
	if err != nil {
		t.Error(err)
	}

	if constructionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testConstructionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Construction{}
	if err = randomize.Struct(seed, o, constructionDBTypes, true, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Constructions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testConstructionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Construction{}
	if err = randomize.Struct(seed, o, constructionDBTypes, true, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Constructions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testConstructionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	constructionOne := &Construction{}
	constructionTwo := &Construction{}
	if err = randomize.Struct(seed, constructionOne, constructionDBTypes, false, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}
	if err = randomize.Struct(seed, constructionTwo, constructionDBTypes, false, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = constructionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = constructionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Constructions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testConstructionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	constructionOne := &Construction{}
	constructionTwo := &Construction{}
	if err = randomize.Struct(seed, constructionOne, constructionDBTypes, false, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}
	if err = randomize.Struct(seed, constructionTwo, constructionDBTypes, false, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = constructionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = constructionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Constructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func constructionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Construction) error {
	*o = Construction{}
	return nil
}

func constructionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Construction) error {
	*o = Construction{}
	return nil
}

func constructionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Construction) error {
	*o = Construction{}
	return nil
}

func constructionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Construction) error {
	*o = Construction{}
	return nil
}

func constructionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Construction) error {
	*o = Construction{}
	return nil
}

func constructionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Construction) error {
	*o = Construction{}
	return nil
}

func constructionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Construction) error {
	*o = Construction{}
	return nil
}

func constructionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Construction) error {
	*o = Construction{}
	return nil
}

func constructionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Construction) error {
	*o = Construction{}
	return nil
}

func testConstructionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Construction{}
	o := &Construction{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, constructionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Construction object: %s", err)
	}

	AddConstructionHook(boil.BeforeInsertHook, constructionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	constructionBeforeInsertHooks = []ConstructionHook{}

	AddConstructionHook(boil.AfterInsertHook, constructionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	constructionAfterInsertHooks = []ConstructionHook{}

	AddConstructionHook(boil.AfterSelectHook, constructionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	constructionAfterSelectHooks = []ConstructionHook{}

	AddConstructionHook(boil.BeforeUpdateHook, constructionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	constructionBeforeUpdateHooks = []ConstructionHook{}

	AddConstructionHook(boil.AfterUpdateHook, constructionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	constructionAfterUpdateHooks = []ConstructionHook{}

	AddConstructionHook(boil.BeforeDeleteHook, constructionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	constructionBeforeDeleteHooks = []ConstructionHook{}

	AddConstructionHook(boil.AfterDeleteHook, constructionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	constructionAfterDeleteHooks = []ConstructionHook{}

	AddConstructionHook(boil.BeforeUpsertHook, constructionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	constructionBeforeUpsertHooks = []ConstructionHook{}

	AddConstructionHook(boil.AfterUpsertHook, constructionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	constructionAfterUpsertHooks = []ConstructionHook{}
}

func testConstructionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Construction{}
	if err = randomize.Struct(seed, o, constructionDBTypes, true, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Constructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testConstructionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Construction{}
	if err = randomize.Struct(seed, o, constructionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(constructionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Constructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testConstructionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Construction{}
	if err = randomize.Struct(seed, o, constructionDBTypes, true, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testConstructionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Construction{}
	if err = randomize.Struct(seed, o, constructionDBTypes, true, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ConstructionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testConstructionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Construction{}
	if err = randomize.Struct(seed, o, constructionDBTypes, true, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Constructions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	constructionDBTypes = map[string]string{`CityX`: `integer`, `CityY`: `integer`, `CreatedAt`: `timestamp without time zone`, `Level`: `integer`, `Modifier`: `integer`, `NeedRefresh`: `boolean`, `Production`: `integer`, `Type`: `integer`, `UpdatedAt`: `timestamp without time zone`, `X`: `integer`, `Y`: `integer`}
	_                   = bytes.MinRead
)

func testConstructionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(constructionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(constructionColumns) == len(constructionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Construction{}
	if err = randomize.Struct(seed, o, constructionDBTypes, true, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Constructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, constructionDBTypes, true, constructionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testConstructionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(constructionColumns) == len(constructionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Construction{}
	if err = randomize.Struct(seed, o, constructionDBTypes, true, constructionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Constructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, constructionDBTypes, true, constructionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(constructionColumns, constructionPrimaryKeyColumns) {
		fields = constructionColumns
	} else {
		fields = strmangle.SetComplement(
			constructionColumns,
			constructionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ConstructionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testConstructionsUpsert(t *testing.T) {
	t.Parallel()

	if len(constructionColumns) == len(constructionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Construction{}
	if err = randomize.Struct(seed, &o, constructionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Construction: %s", err)
	}

	count, err := Constructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, constructionDBTypes, false, constructionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Construction struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Construction: %s", err)
	}

	count, err = Constructions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
