// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUpgrades(t *testing.T) {
	t.Parallel()

	query := Upgrades()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUpgradesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upgrade{}
	if err = randomize.Struct(seed, o, upgradeDBTypes, true, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Upgrades().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpgradesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upgrade{}
	if err = randomize.Struct(seed, o, upgradeDBTypes, true, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Upgrades().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Upgrades().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpgradesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upgrade{}
	if err = randomize.Struct(seed, o, upgradeDBTypes, true, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UpgradeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Upgrades().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUpgradesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upgrade{}
	if err = randomize.Struct(seed, o, upgradeDBTypes, true, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UpgradeExists(ctx, tx, o.ConstructionX, o.ConstructionY, o.CityX, o.CityY)
	if err != nil {
		t.Errorf("Unable to check if Upgrade exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UpgradeExists to return true, but got false.")
	}
}

func testUpgradesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upgrade{}
	if err = randomize.Struct(seed, o, upgradeDBTypes, true, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	upgradeFound, err := FindUpgrade(ctx, tx, o.ConstructionX, o.ConstructionY, o.CityX, o.CityY)
	if err != nil {
		t.Error(err)
	}

	if upgradeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUpgradesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upgrade{}
	if err = randomize.Struct(seed, o, upgradeDBTypes, true, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Upgrades().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUpgradesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upgrade{}
	if err = randomize.Struct(seed, o, upgradeDBTypes, true, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Upgrades().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUpgradesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	upgradeOne := &Upgrade{}
	upgradeTwo := &Upgrade{}
	if err = randomize.Struct(seed, upgradeOne, upgradeDBTypes, false, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}
	if err = randomize.Struct(seed, upgradeTwo, upgradeDBTypes, false, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = upgradeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = upgradeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Upgrades().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUpgradesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	upgradeOne := &Upgrade{}
	upgradeTwo := &Upgrade{}
	if err = randomize.Struct(seed, upgradeOne, upgradeDBTypes, false, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}
	if err = randomize.Struct(seed, upgradeTwo, upgradeDBTypes, false, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = upgradeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = upgradeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Upgrades().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func upgradeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Upgrade) error {
	*o = Upgrade{}
	return nil
}

func upgradeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Upgrade) error {
	*o = Upgrade{}
	return nil
}

func upgradeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Upgrade) error {
	*o = Upgrade{}
	return nil
}

func upgradeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Upgrade) error {
	*o = Upgrade{}
	return nil
}

func upgradeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Upgrade) error {
	*o = Upgrade{}
	return nil
}

func upgradeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Upgrade) error {
	*o = Upgrade{}
	return nil
}

func upgradeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Upgrade) error {
	*o = Upgrade{}
	return nil
}

func upgradeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Upgrade) error {
	*o = Upgrade{}
	return nil
}

func upgradeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Upgrade) error {
	*o = Upgrade{}
	return nil
}

func testUpgradesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Upgrade{}
	o := &Upgrade{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, upgradeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Upgrade object: %s", err)
	}

	AddUpgradeHook(boil.BeforeInsertHook, upgradeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	upgradeBeforeInsertHooks = []UpgradeHook{}

	AddUpgradeHook(boil.AfterInsertHook, upgradeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	upgradeAfterInsertHooks = []UpgradeHook{}

	AddUpgradeHook(boil.AfterSelectHook, upgradeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	upgradeAfterSelectHooks = []UpgradeHook{}

	AddUpgradeHook(boil.BeforeUpdateHook, upgradeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	upgradeBeforeUpdateHooks = []UpgradeHook{}

	AddUpgradeHook(boil.AfterUpdateHook, upgradeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	upgradeAfterUpdateHooks = []UpgradeHook{}

	AddUpgradeHook(boil.BeforeDeleteHook, upgradeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	upgradeBeforeDeleteHooks = []UpgradeHook{}

	AddUpgradeHook(boil.AfterDeleteHook, upgradeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	upgradeAfterDeleteHooks = []UpgradeHook{}

	AddUpgradeHook(boil.BeforeUpsertHook, upgradeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	upgradeBeforeUpsertHooks = []UpgradeHook{}

	AddUpgradeHook(boil.AfterUpsertHook, upgradeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	upgradeAfterUpsertHooks = []UpgradeHook{}
}

func testUpgradesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upgrade{}
	if err = randomize.Struct(seed, o, upgradeDBTypes, true, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Upgrades().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpgradesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upgrade{}
	if err = randomize.Struct(seed, o, upgradeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(upgradeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Upgrades().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUpgradesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upgrade{}
	if err = randomize.Struct(seed, o, upgradeDBTypes, true, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUpgradesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upgrade{}
	if err = randomize.Struct(seed, o, upgradeDBTypes, true, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UpgradeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUpgradesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Upgrade{}
	if err = randomize.Struct(seed, o, upgradeDBTypes, true, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Upgrades().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	upgradeDBTypes = map[string]string{`CityX`: `integer`, `CityY`: `integer`, `ConstructionX`: `integer`, `ConstructionY`: `integer`, `CreatedAt`: `timestamp without time zone`, `Duration`: `integer`, `IndexAtQueue`: `integer`, `Start`: `timestamp without time zone`}
	_              = bytes.MinRead
)

func testUpgradesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(upgradePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(upgradeColumns) == len(upgradePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Upgrade{}
	if err = randomize.Struct(seed, o, upgradeDBTypes, true, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Upgrades().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, upgradeDBTypes, true, upgradePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUpgradesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(upgradeColumns) == len(upgradePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Upgrade{}
	if err = randomize.Struct(seed, o, upgradeDBTypes, true, upgradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Upgrades().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, upgradeDBTypes, true, upgradePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(upgradeColumns, upgradePrimaryKeyColumns) {
		fields = upgradeColumns
	} else {
		fields = strmangle.SetComplement(
			upgradeColumns,
			upgradePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UpgradeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUpgradesUpsert(t *testing.T) {
	t.Parallel()

	if len(upgradeColumns) == len(upgradePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Upgrade{}
	if err = randomize.Struct(seed, &o, upgradeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Upgrade: %s", err)
	}

	count, err := Upgrades().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, upgradeDBTypes, false, upgradePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Upgrade struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Upgrade: %s", err)
	}

	count, err = Upgrades().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
