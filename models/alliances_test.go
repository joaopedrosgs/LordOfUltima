// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAlliances(t *testing.T) {
	t.Parallel()

	query := Alliances()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAlliancesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Alliance{}
	if err = randomize.Struct(seed, o, allianceDBTypes, true, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Alliances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAlliancesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Alliance{}
	if err = randomize.Struct(seed, o, allianceDBTypes, true, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Alliances().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Alliances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAlliancesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Alliance{}
	if err = randomize.Struct(seed, o, allianceDBTypes, true, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AllianceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Alliances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAlliancesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Alliance{}
	if err = randomize.Struct(seed, o, allianceDBTypes, true, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AllianceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Alliance exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AllianceExists to return true, but got false.")
	}
}

func testAlliancesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Alliance{}
	if err = randomize.Struct(seed, o, allianceDBTypes, true, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	allianceFound, err := FindAlliance(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if allianceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAlliancesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Alliance{}
	if err = randomize.Struct(seed, o, allianceDBTypes, true, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Alliances().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAlliancesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Alliance{}
	if err = randomize.Struct(seed, o, allianceDBTypes, true, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Alliances().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAlliancesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	allianceOne := &Alliance{}
	allianceTwo := &Alliance{}
	if err = randomize.Struct(seed, allianceOne, allianceDBTypes, false, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}
	if err = randomize.Struct(seed, allianceTwo, allianceDBTypes, false, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = allianceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = allianceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Alliances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAlliancesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	allianceOne := &Alliance{}
	allianceTwo := &Alliance{}
	if err = randomize.Struct(seed, allianceOne, allianceDBTypes, false, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}
	if err = randomize.Struct(seed, allianceTwo, allianceDBTypes, false, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = allianceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = allianceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Alliances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func allianceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Alliance) error {
	*o = Alliance{}
	return nil
}

func allianceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Alliance) error {
	*o = Alliance{}
	return nil
}

func allianceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Alliance) error {
	*o = Alliance{}
	return nil
}

func allianceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Alliance) error {
	*o = Alliance{}
	return nil
}

func allianceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Alliance) error {
	*o = Alliance{}
	return nil
}

func allianceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Alliance) error {
	*o = Alliance{}
	return nil
}

func allianceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Alliance) error {
	*o = Alliance{}
	return nil
}

func allianceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Alliance) error {
	*o = Alliance{}
	return nil
}

func allianceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Alliance) error {
	*o = Alliance{}
	return nil
}

func testAlliancesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Alliance{}
	o := &Alliance{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, allianceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Alliance object: %s", err)
	}

	AddAllianceHook(boil.BeforeInsertHook, allianceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	allianceBeforeInsertHooks = []AllianceHook{}

	AddAllianceHook(boil.AfterInsertHook, allianceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	allianceAfterInsertHooks = []AllianceHook{}

	AddAllianceHook(boil.AfterSelectHook, allianceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	allianceAfterSelectHooks = []AllianceHook{}

	AddAllianceHook(boil.BeforeUpdateHook, allianceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	allianceBeforeUpdateHooks = []AllianceHook{}

	AddAllianceHook(boil.AfterUpdateHook, allianceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	allianceAfterUpdateHooks = []AllianceHook{}

	AddAllianceHook(boil.BeforeDeleteHook, allianceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	allianceBeforeDeleteHooks = []AllianceHook{}

	AddAllianceHook(boil.AfterDeleteHook, allianceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	allianceAfterDeleteHooks = []AllianceHook{}

	AddAllianceHook(boil.BeforeUpsertHook, allianceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	allianceBeforeUpsertHooks = []AllianceHook{}

	AddAllianceHook(boil.AfterUpsertHook, allianceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	allianceAfterUpsertHooks = []AllianceHook{}
}

func testAlliancesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Alliance{}
	if err = randomize.Struct(seed, o, allianceDBTypes, true, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Alliances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAlliancesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Alliance{}
	if err = randomize.Struct(seed, o, allianceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(allianceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Alliances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAlliancesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Alliance{}
	if err = randomize.Struct(seed, o, allianceDBTypes, true, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAlliancesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Alliance{}
	if err = randomize.Struct(seed, o, allianceDBTypes, true, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AllianceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAlliancesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Alliance{}
	if err = randomize.Struct(seed, o, allianceDBTypes, true, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Alliances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	allianceDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `ID`: `integer`, `Name`: `character varying`, `UpdatedAt`: `timestamp without time zone`}
	_               = bytes.MinRead
)

func testAlliancesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(alliancePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(allianceColumns) == len(alliancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Alliance{}
	if err = randomize.Struct(seed, o, allianceDBTypes, true, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Alliances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, allianceDBTypes, true, alliancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAlliancesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(allianceColumns) == len(alliancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Alliance{}
	if err = randomize.Struct(seed, o, allianceDBTypes, true, allianceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Alliances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, allianceDBTypes, true, alliancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(allianceColumns, alliancePrimaryKeyColumns) {
		fields = allianceColumns
	} else {
		fields = strmangle.SetComplement(
			allianceColumns,
			alliancePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AllianceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAlliancesUpsert(t *testing.T) {
	t.Parallel()

	if len(allianceColumns) == len(alliancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Alliance{}
	if err = randomize.Struct(seed, &o, allianceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Alliance: %s", err)
	}

	count, err := Alliances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, allianceDBTypes, false, alliancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Alliance struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Alliance: %s", err)
	}

	count, err = Alliances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
