// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Upgrade is an object representing the database table.
type Upgrade struct {
	ConstructionX int       `boil:"construction_x" json:"construction_x" toml:"construction_x" yaml:"construction_x"`
	ConstructionY int       `boil:"construction_y" json:"construction_y" toml:"construction_y" yaml:"construction_y"`
	CityX         int       `boil:"city_x" json:"city_x" toml:"city_x" yaml:"city_x"`
	CityY         int       `boil:"city_y" json:"city_y" toml:"city_y" yaml:"city_y"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	IndexAtQueue  int       `boil:"index_at_queue" json:"index_at_queue" toml:"index_at_queue" yaml:"index_at_queue"`
	Duration      int       `boil:"duration" json:"duration" toml:"duration" yaml:"duration"`
	Start         time.Time `boil:"start" json:"start" toml:"start" yaml:"start"`

	R *upgradeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L upgradeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UpgradeColumns = struct {
	ConstructionX string
	ConstructionY string
	CityX         string
	CityY         string
	CreatedAt     string
	IndexAtQueue  string
	Duration      string
	Start         string
}{
	ConstructionX: "construction_x",
	ConstructionY: "construction_y",
	CityX:         "city_x",
	CityY:         "city_y",
	CreatedAt:     "created_at",
	IndexAtQueue:  "index_at_queue",
	Duration:      "duration",
	Start:         "start",
}

// UpgradeRels is where relationship names are stored.
var UpgradeRels = struct {
}{}

// upgradeR is where relationships are stored.
type upgradeR struct {
}

// NewStruct creates a new relationship struct
func (*upgradeR) NewStruct() *upgradeR {
	return &upgradeR{}
}

// upgradeL is where Load methods for each relationship are stored.
type upgradeL struct{}

var (
	upgradeColumns               = []string{"construction_x", "construction_y", "city_x", "city_y", "created_at", "index_at_queue", "duration", "start"}
	upgradeColumnsWithoutDefault = []string{"construction_x", "construction_y", "city_x", "city_y"}
	upgradeColumnsWithDefault    = []string{"created_at", "index_at_queue", "duration", "start"}
	upgradePrimaryKeyColumns     = []string{"construction_x", "construction_y", "city_x", "city_y"}
)

type (
	// UpgradeSlice is an alias for a slice of pointers to Upgrade.
	// This should generally be used opposed to []Upgrade.
	UpgradeSlice []*Upgrade
	// UpgradeHook is the signature for custom Upgrade hook methods
	UpgradeHook func(context.Context, boil.ContextExecutor, *Upgrade) error

	upgradeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	upgradeType                 = reflect.TypeOf(&Upgrade{})
	upgradeMapping              = queries.MakeStructMapping(upgradeType)
	upgradePrimaryKeyMapping, _ = queries.BindMapping(upgradeType, upgradeMapping, upgradePrimaryKeyColumns)
	upgradeInsertCacheMut       sync.RWMutex
	upgradeInsertCache          = make(map[string]insertCache)
	upgradeUpdateCacheMut       sync.RWMutex
	upgradeUpdateCache          = make(map[string]updateCache)
	upgradeUpsertCacheMut       sync.RWMutex
	upgradeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var upgradeBeforeInsertHooks []UpgradeHook
var upgradeBeforeUpdateHooks []UpgradeHook
var upgradeBeforeDeleteHooks []UpgradeHook
var upgradeBeforeUpsertHooks []UpgradeHook

var upgradeAfterInsertHooks []UpgradeHook
var upgradeAfterSelectHooks []UpgradeHook
var upgradeAfterUpdateHooks []UpgradeHook
var upgradeAfterDeleteHooks []UpgradeHook
var upgradeAfterUpsertHooks []UpgradeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Upgrade) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range upgradeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Upgrade) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range upgradeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Upgrade) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range upgradeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Upgrade) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range upgradeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Upgrade) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range upgradeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Upgrade) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range upgradeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Upgrade) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range upgradeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Upgrade) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range upgradeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Upgrade) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range upgradeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUpgradeHook registers your hook function for all future operations.
func AddUpgradeHook(hookPoint boil.HookPoint, upgradeHook UpgradeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		upgradeBeforeInsertHooks = append(upgradeBeforeInsertHooks, upgradeHook)
	case boil.BeforeUpdateHook:
		upgradeBeforeUpdateHooks = append(upgradeBeforeUpdateHooks, upgradeHook)
	case boil.BeforeDeleteHook:
		upgradeBeforeDeleteHooks = append(upgradeBeforeDeleteHooks, upgradeHook)
	case boil.BeforeUpsertHook:
		upgradeBeforeUpsertHooks = append(upgradeBeforeUpsertHooks, upgradeHook)
	case boil.AfterInsertHook:
		upgradeAfterInsertHooks = append(upgradeAfterInsertHooks, upgradeHook)
	case boil.AfterSelectHook:
		upgradeAfterSelectHooks = append(upgradeAfterSelectHooks, upgradeHook)
	case boil.AfterUpdateHook:
		upgradeAfterUpdateHooks = append(upgradeAfterUpdateHooks, upgradeHook)
	case boil.AfterDeleteHook:
		upgradeAfterDeleteHooks = append(upgradeAfterDeleteHooks, upgradeHook)
	case boil.AfterUpsertHook:
		upgradeAfterUpsertHooks = append(upgradeAfterUpsertHooks, upgradeHook)
	}
}

// One returns a single upgrade record from the query.
func (q upgradeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Upgrade, error) {
	o := &Upgrade{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for upgrades")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Upgrade records from the query.
func (q upgradeQuery) All(ctx context.Context, exec boil.ContextExecutor) (UpgradeSlice, error) {
	var o []*Upgrade

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Upgrade slice")
	}

	if len(upgradeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Upgrade records in the query.
func (q upgradeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count upgrades rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q upgradeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if upgrades exists")
	}

	return count > 0, nil
}

// Upgrades retrieves all the records using an executor.
func Upgrades(mods ...qm.QueryMod) upgradeQuery {
	mods = append(mods, qm.From("\"upgrades\""))
	return upgradeQuery{NewQuery(mods...)}
}

// FindUpgrade retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUpgrade(ctx context.Context, exec boil.ContextExecutor, constructionX int, constructionY int, cityX int, cityY int, selectCols ...string) (*Upgrade, error) {
	upgradeObj := &Upgrade{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"upgrades\" where \"construction_x\"=$1 AND \"construction_y\"=$2 AND \"city_x\"=$3 AND \"city_y\"=$4", sel,
	)

	q := queries.Raw(query, constructionX, constructionY, cityX, cityY)

	err := q.Bind(ctx, exec, upgradeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from upgrades")
	}

	return upgradeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Upgrade) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no upgrades provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upgradeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	upgradeInsertCacheMut.RLock()
	cache, cached := upgradeInsertCache[key]
	upgradeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			upgradeColumns,
			upgradeColumnsWithDefault,
			upgradeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(upgradeType, upgradeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(upgradeType, upgradeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"upgrades\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"upgrades\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into upgrades")
	}

	if !cached {
		upgradeInsertCacheMut.Lock()
		upgradeInsertCache[key] = cache
		upgradeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Upgrade.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Upgrade) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	upgradeUpdateCacheMut.RLock()
	cache, cached := upgradeUpdateCache[key]
	upgradeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			upgradeColumns,
			upgradePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update upgrades, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"upgrades\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, upgradePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(upgradeType, upgradeMapping, append(wl, upgradePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update upgrades row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for upgrades")
	}

	if !cached {
		upgradeUpdateCacheMut.Lock()
		upgradeUpdateCache[key] = cache
		upgradeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q upgradeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for upgrades")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for upgrades")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UpgradeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upgradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"upgrades\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, upgradePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in upgrade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all upgrade")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Upgrade) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no upgrades provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(upgradeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	upgradeUpsertCacheMut.RLock()
	cache, cached := upgradeUpsertCache[key]
	upgradeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			upgradeColumns,
			upgradeColumnsWithDefault,
			upgradeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			upgradeColumns,
			upgradePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert upgrades, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(upgradePrimaryKeyColumns))
			copy(conflict, upgradePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"upgrades\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(upgradeType, upgradeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(upgradeType, upgradeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert upgrades")
	}

	if !cached {
		upgradeUpsertCacheMut.Lock()
		upgradeUpsertCache[key] = cache
		upgradeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Upgrade record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Upgrade) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Upgrade provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), upgradePrimaryKeyMapping)
	sql := "DELETE FROM \"upgrades\" WHERE \"construction_x\"=$1 AND \"construction_y\"=$2 AND \"city_x\"=$3 AND \"city_y\"=$4"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from upgrades")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for upgrades")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q upgradeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no upgradeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from upgrades")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for upgrades")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UpgradeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Upgrade slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(upgradeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upgradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"upgrades\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upgradePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from upgrade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for upgrades")
	}

	if len(upgradeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Upgrade) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUpgrade(ctx, exec, o.ConstructionX, o.ConstructionY, o.CityX, o.CityY)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UpgradeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UpgradeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), upgradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"upgrades\".* FROM \"upgrades\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, upgradePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UpgradeSlice")
	}

	*o = slice

	return nil
}

// UpgradeExists checks if the Upgrade row exists.
func UpgradeExists(ctx context.Context, exec boil.ContextExecutor, constructionX int, constructionY int, cityX int, cityY int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"upgrades\" where \"construction_x\"=$1 AND \"construction_y\"=$2 AND \"city_x\"=$3 AND \"city_y\"=$4 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, constructionX, constructionY, cityX, cityY)
	}

	row := exec.QueryRowContext(ctx, sql, constructionX, constructionY, cityX, cityY)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if upgrades exists")
	}

	return exists, nil
}
