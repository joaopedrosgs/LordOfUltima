// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Continent is an object representing the database table.
type Continent struct {
	X              int16     `boil:"x" json:"x" toml:"x" yaml:"x"`
	Y              int16     `boil:"y" json:"y" toml:"y" yaml:"y"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	IsActive       bool      `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	Size           int16     `boil:"size" json:"size" toml:"size" yaml:"size"`
	NumberOfCities int16     `boil:"number_of_cities" json:"number_of_cities" toml:"number_of_cities" yaml:"number_of_cities"`
	CitiesLimit    int16     `boil:"cities_limit" json:"cities_limit" toml:"cities_limit" yaml:"cities_limit"`

	R *continentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L continentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContinentColumns = struct {
	X              string
	Y              string
	CreatedAt      string
	UpdatedAt      string
	IsActive       string
	Size           string
	NumberOfCities string
	CitiesLimit    string
}{
	X:              "x",
	Y:              "y",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	IsActive:       "is_active",
	Size:           "size",
	NumberOfCities: "number_of_cities",
	CitiesLimit:    "cities_limit",
}

// ContinentRels is where relationship names are stored.
var ContinentRels = struct {
	ContinentXTiles string
	ContinentXTiles string
	ContinentXTiles string
	ContinentXTiles string
}{
	ContinentXTiles: "ContinentXTiles",
	ContinentXTiles: "ContinentXTiles",
	ContinentXTiles: "ContinentXTiles",
	ContinentXTiles: "ContinentXTiles",
}

// continentR is where relationships are stored.
type continentR struct {
	ContinentXTiles TileSlice
	ContinentXTiles TileSlice
	ContinentXTiles TileSlice
	ContinentXTiles TileSlice
}

// NewStruct creates a new relationship struct
func (*continentR) NewStruct() *continentR {
	return &continentR{}
}

// continentL is where Load methods for each relationship are stored.
type continentL struct{}

var (
	continentColumns               = []string{"x", "y", "created_at", "updated_at", "is_active", "size", "number_of_cities", "cities_limit"}
	continentColumnsWithoutDefault = []string{"x", "y"}
	continentColumnsWithDefault    = []string{"created_at", "updated_at", "is_active", "size", "number_of_cities", "cities_limit"}
	continentPrimaryKeyColumns     = []string{"x", "y"}
)

type (
	// ContinentSlice is an alias for a slice of pointers to Continent.
	// This should generally be used opposed to []Continent.
	ContinentSlice []*Continent
	// ContinentHook is the signature for custom Continent hook methods
	ContinentHook func(context.Context, boil.ContextExecutor, *Continent) error

	continentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	continentType                 = reflect.TypeOf(&Continent{})
	continentMapping              = queries.MakeStructMapping(continentType)
	continentPrimaryKeyMapping, _ = queries.BindMapping(continentType, continentMapping, continentPrimaryKeyColumns)
	continentInsertCacheMut       sync.RWMutex
	continentInsertCache          = make(map[string]insertCache)
	continentUpdateCacheMut       sync.RWMutex
	continentUpdateCache          = make(map[string]updateCache)
	continentUpsertCacheMut       sync.RWMutex
	continentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var continentBeforeInsertHooks []ContinentHook
var continentBeforeUpdateHooks []ContinentHook
var continentBeforeDeleteHooks []ContinentHook
var continentBeforeUpsertHooks []ContinentHook

var continentAfterInsertHooks []ContinentHook
var continentAfterSelectHooks []ContinentHook
var continentAfterUpdateHooks []ContinentHook
var continentAfterDeleteHooks []ContinentHook
var continentAfterUpsertHooks []ContinentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Continent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range continentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Continent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range continentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Continent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range continentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Continent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range continentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Continent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range continentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Continent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range continentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Continent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range continentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Continent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range continentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Continent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range continentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddContinentHook registers your hook function for all future operations.
func AddContinentHook(hookPoint boil.HookPoint, continentHook ContinentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		continentBeforeInsertHooks = append(continentBeforeInsertHooks, continentHook)
	case boil.BeforeUpdateHook:
		continentBeforeUpdateHooks = append(continentBeforeUpdateHooks, continentHook)
	case boil.BeforeDeleteHook:
		continentBeforeDeleteHooks = append(continentBeforeDeleteHooks, continentHook)
	case boil.BeforeUpsertHook:
		continentBeforeUpsertHooks = append(continentBeforeUpsertHooks, continentHook)
	case boil.AfterInsertHook:
		continentAfterInsertHooks = append(continentAfterInsertHooks, continentHook)
	case boil.AfterSelectHook:
		continentAfterSelectHooks = append(continentAfterSelectHooks, continentHook)
	case boil.AfterUpdateHook:
		continentAfterUpdateHooks = append(continentAfterUpdateHooks, continentHook)
	case boil.AfterDeleteHook:
		continentAfterDeleteHooks = append(continentAfterDeleteHooks, continentHook)
	case boil.AfterUpsertHook:
		continentAfterUpsertHooks = append(continentAfterUpsertHooks, continentHook)
	}
}

// One returns a single continent record from the query.
func (q continentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Continent, error) {
	o := &Continent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for continents")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Continent records from the query.
func (q continentQuery) All(ctx context.Context, exec boil.ContextExecutor) (ContinentSlice, error) {
	var o []*Continent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Continent slice")
	}

	if len(continentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Continent records in the query.
func (q continentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count continents rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q continentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if continents exists")
	}

	return count > 0, nil
}

// ContinentXTiles retrieves all the tile's Tiles with an executor via continent_x column.
func (o *Continent) ContinentXTiles(mods ...qm.QueryMod) tileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tiles\".\"continent_x\"=?", o.X),
	)

	query := Tiles(queryMods...)
	queries.SetFrom(query.Query, "\"tiles\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"tiles\".*"})
	}

	return query
}

// ContinentXTiles retrieves all the tile's Tiles with an executor via continent_x column.
func (o *Continent) ContinentXTiles(mods ...qm.QueryMod) tileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tiles\".\"continent_x\"=?", o.Y),
	)

	query := Tiles(queryMods...)
	queries.SetFrom(query.Query, "\"tiles\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"tiles\".*"})
	}

	return query
}

// ContinentXTiles retrieves all the tile's Tiles with an executor via continent_y column.
func (o *Continent) ContinentXTiles(mods ...qm.QueryMod) tileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tiles\".\"continent_y\"=?", o.X),
	)

	query := Tiles(queryMods...)
	queries.SetFrom(query.Query, "\"tiles\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"tiles\".*"})
	}

	return query
}

// ContinentXTiles retrieves all the tile's Tiles with an executor via continent_y column.
func (o *Continent) ContinentXTiles(mods ...qm.QueryMod) tileQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tiles\".\"continent_y\"=?", o.Y),
	)

	query := Tiles(queryMods...)
	queries.SetFrom(query.Query, "\"tiles\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"tiles\".*"})
	}

	return query
}

// LoadContinentXTiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (continentL) LoadContinentXTiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContinent interface{}, mods queries.Applicator) error {
	var slice []*Continent
	var object *Continent

	if singular {
		object = maybeContinent.(*Continent)
	} else {
		slice = *maybeContinent.(*[]*Continent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &continentR{}
		}
		args = append(args, object.X)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &continentR{}
			}

			for _, a := range args {
				if a == obj.X {
					continue Outer
				}
			}

			args = append(args, obj.X)
		}
	}

	query := NewQuery(qm.From(`tiles`), qm.WhereIn(`continent_x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tiles")
	}

	var resultSlice []*Tile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tiles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tiles")
	}

	if len(tileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ContinentXTiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tileR{}
			}
			foreign.R.ContinentX = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.X == foreign.ContinentX {
				local.R.ContinentXTiles = append(local.R.ContinentXTiles, foreign)
				if foreign.R == nil {
					foreign.R = &tileR{}
				}
				foreign.R.ContinentX = local
				break
			}
		}
	}

	return nil
}

// LoadContinentXTiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (continentL) LoadContinentXTiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContinent interface{}, mods queries.Applicator) error {
	var slice []*Continent
	var object *Continent

	if singular {
		object = maybeContinent.(*Continent)
	} else {
		slice = *maybeContinent.(*[]*Continent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &continentR{}
		}
		args = append(args, object.Y)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &continentR{}
			}

			for _, a := range args {
				if a == obj.Y {
					continue Outer
				}
			}

			args = append(args, obj.Y)
		}
	}

	query := NewQuery(qm.From(`tiles`), qm.WhereIn(`continent_x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tiles")
	}

	var resultSlice []*Tile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tiles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tiles")
	}

	if len(tileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ContinentXTiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tileR{}
			}
			foreign.R.ContinentX = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Y == foreign.ContinentX {
				local.R.ContinentXTiles = append(local.R.ContinentXTiles, foreign)
				if foreign.R == nil {
					foreign.R = &tileR{}
				}
				foreign.R.ContinentX = local
				break
			}
		}
	}

	return nil
}

// LoadContinentXTiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (continentL) LoadContinentXTiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContinent interface{}, mods queries.Applicator) error {
	var slice []*Continent
	var object *Continent

	if singular {
		object = maybeContinent.(*Continent)
	} else {
		slice = *maybeContinent.(*[]*Continent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &continentR{}
		}
		args = append(args, object.X)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &continentR{}
			}

			for _, a := range args {
				if a == obj.X {
					continue Outer
				}
			}

			args = append(args, obj.X)
		}
	}

	query := NewQuery(qm.From(`tiles`), qm.WhereIn(`continent_y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tiles")
	}

	var resultSlice []*Tile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tiles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tiles")
	}

	if len(tileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ContinentXTiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tileR{}
			}
			foreign.R.ContinentX = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.X == foreign.ContinentY {
				local.R.ContinentXTiles = append(local.R.ContinentXTiles, foreign)
				if foreign.R == nil {
					foreign.R = &tileR{}
				}
				foreign.R.ContinentX = local
				break
			}
		}
	}

	return nil
}

// LoadContinentXTiles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (continentL) LoadContinentXTiles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContinent interface{}, mods queries.Applicator) error {
	var slice []*Continent
	var object *Continent

	if singular {
		object = maybeContinent.(*Continent)
	} else {
		slice = *maybeContinent.(*[]*Continent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &continentR{}
		}
		args = append(args, object.Y)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &continentR{}
			}

			for _, a := range args {
				if a == obj.Y {
					continue Outer
				}
			}

			args = append(args, obj.Y)
		}
	}

	query := NewQuery(qm.From(`tiles`), qm.WhereIn(`continent_y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tiles")
	}

	var resultSlice []*Tile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tiles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tiles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tiles")
	}

	if len(tileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ContinentXTiles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tileR{}
			}
			foreign.R.ContinentX = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Y == foreign.ContinentY {
				local.R.ContinentXTiles = append(local.R.ContinentXTiles, foreign)
				if foreign.R == nil {
					foreign.R = &tileR{}
				}
				foreign.R.ContinentX = local
				break
			}
		}
	}

	return nil
}

// AddContinentXTiles adds the given related objects to the existing relationships
// of the continent, optionally inserting them as new records.
// Appends related to o.R.ContinentXTiles.
// Sets related.R.ContinentX appropriately.
func (o *Continent) AddContinentXTiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tile) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentX = o.X
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tiles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_x"}),
				strmangle.WhereClause("\"", "\"", 2, tilePrimaryKeyColumns),
			)
			values := []interface{}{o.X, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentX = o.X
		}
	}

	if o.R == nil {
		o.R = &continentR{
			ContinentXTiles: related,
		}
	} else {
		o.R.ContinentXTiles = append(o.R.ContinentXTiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tileR{
				ContinentX: o,
			}
		} else {
			rel.R.ContinentX = o
		}
	}
	return nil
}

// AddContinentXTiles adds the given related objects to the existing relationships
// of the continent, optionally inserting them as new records.
// Appends related to o.R.ContinentXTiles.
// Sets related.R.ContinentX appropriately.
func (o *Continent) AddContinentXTiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tile) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentX = o.Y
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tiles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_x"}),
				strmangle.WhereClause("\"", "\"", 2, tilePrimaryKeyColumns),
			)
			values := []interface{}{o.Y, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentX = o.Y
		}
	}

	if o.R == nil {
		o.R = &continentR{
			ContinentXTiles: related,
		}
	} else {
		o.R.ContinentXTiles = append(o.R.ContinentXTiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tileR{
				ContinentX: o,
			}
		} else {
			rel.R.ContinentX = o
		}
	}
	return nil
}

// AddContinentXTiles adds the given related objects to the existing relationships
// of the continent, optionally inserting them as new records.
// Appends related to o.R.ContinentXTiles.
// Sets related.R.ContinentX appropriately.
func (o *Continent) AddContinentXTiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tile) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentY = o.X
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tiles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_y"}),
				strmangle.WhereClause("\"", "\"", 2, tilePrimaryKeyColumns),
			)
			values := []interface{}{o.X, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentY = o.X
		}
	}

	if o.R == nil {
		o.R = &continentR{
			ContinentXTiles: related,
		}
	} else {
		o.R.ContinentXTiles = append(o.R.ContinentXTiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tileR{
				ContinentX: o,
			}
		} else {
			rel.R.ContinentX = o
		}
	}
	return nil
}

// AddContinentXTiles adds the given related objects to the existing relationships
// of the continent, optionally inserting them as new records.
// Appends related to o.R.ContinentXTiles.
// Sets related.R.ContinentX appropriately.
func (o *Continent) AddContinentXTiles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tile) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentY = o.Y
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tiles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_y"}),
				strmangle.WhereClause("\"", "\"", 2, tilePrimaryKeyColumns),
			)
			values := []interface{}{o.Y, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentY = o.Y
		}
	}

	if o.R == nil {
		o.R = &continentR{
			ContinentXTiles: related,
		}
	} else {
		o.R.ContinentXTiles = append(o.R.ContinentXTiles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tileR{
				ContinentX: o,
			}
		} else {
			rel.R.ContinentX = o
		}
	}
	return nil
}

// Continents retrieves all the records using an executor.
func Continents(mods ...qm.QueryMod) continentQuery {
	mods = append(mods, qm.From("\"continents\""))
	return continentQuery{NewQuery(mods...)}
}

// FindContinent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContinent(ctx context.Context, exec boil.ContextExecutor, x int16, y int16, selectCols ...string) (*Continent, error) {
	continentObj := &Continent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"continents\" where \"x\"=$1 AND \"y\"=$2", sel,
	)

	q := queries.Raw(query, x, y)

	err := q.Bind(ctx, exec, continentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from continents")
	}

	return continentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Continent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no continents provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(continentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	continentInsertCacheMut.RLock()
	cache, cached := continentInsertCache[key]
	continentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			continentColumns,
			continentColumnsWithDefault,
			continentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(continentType, continentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(continentType, continentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"continents\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"continents\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into continents")
	}

	if !cached {
		continentInsertCacheMut.Lock()
		continentInsertCache[key] = cache
		continentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Continent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Continent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	continentUpdateCacheMut.RLock()
	cache, cached := continentUpdateCache[key]
	continentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			continentColumns,
			continentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update continents, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"continents\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, continentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(continentType, continentMapping, append(wl, continentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update continents row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for continents")
	}

	if !cached {
		continentUpdateCacheMut.Lock()
		continentUpdateCache[key] = cache
		continentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q continentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for continents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for continents")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContinentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), continentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"continents\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, continentPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in continent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all continent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Continent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no continents provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(continentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	continentUpsertCacheMut.RLock()
	cache, cached := continentUpsertCache[key]
	continentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			continentColumns,
			continentColumnsWithDefault,
			continentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			continentColumns,
			continentPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert continents, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(continentPrimaryKeyColumns))
			copy(conflict, continentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"continents\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(continentType, continentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(continentType, continentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert continents")
	}

	if !cached {
		continentUpsertCacheMut.Lock()
		continentUpsertCache[key] = cache
		continentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Continent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Continent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Continent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), continentPrimaryKeyMapping)
	sql := "DELETE FROM \"continents\" WHERE \"x\"=$1 AND \"y\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from continents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for continents")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q continentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no continentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from continents")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for continents")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContinentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Continent slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(continentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), continentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"continents\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, continentPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from continent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for continents")
	}

	if len(continentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Continent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindContinent(ctx, exec, o.X, o.Y)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContinentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContinentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), continentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"continents\".* FROM \"continents\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, continentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ContinentSlice")
	}

	*o = slice

	return nil
}

// ContinentExists checks if the Continent row exists.
func ContinentExists(ctx context.Context, exec boil.ContextExecutor, x int16, y int16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"continents\" where \"x\"=$1 AND \"y\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, x, y)
	}

	row := exec.QueryRowContext(ctx, sql, x, y)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if continents exists")
	}

	return exists, nil
}
