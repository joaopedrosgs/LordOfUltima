// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// MilitaryAction is an object representing the database table.
type MilitaryAction struct {
	ID       int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	OriginID null.Int   `boil:"origin_id" json:"origin_id,omitempty" toml:"origin_id" yaml:"origin_id,omitempty"`
	TargetID null.Int   `boil:"target_id" json:"target_id,omitempty" toml:"target_id" yaml:"target_id,omitempty"`
	Arrival  time.Time  `boil:"arrival" json:"arrival" toml:"arrival" yaml:"arrival"`
	Troops   types.JSON `boil:"troops" json:"troops" toml:"troops" yaml:"troops"`

	R *militaryActionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L militaryActionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MilitaryActionColumns = struct {
	ID       string
	OriginID string
	TargetID string
	Arrival  string
	Troops   string
}{
	ID:       "id",
	OriginID: "origin_id",
	TargetID: "target_id",
	Arrival:  "arrival",
	Troops:   "troops",
}

// MilitaryActionRels is where relationship names are stored.
var MilitaryActionRels = struct {
}{}

// militaryActionR is where relationships are stored.
type militaryActionR struct {
}

// NewStruct creates a new relationship struct
func (*militaryActionR) NewStruct() *militaryActionR {
	return &militaryActionR{}
}

// militaryActionL is where Load methods for each relationship are stored.
type militaryActionL struct{}

var (
	militaryActionColumns               = []string{"id", "origin_id", "target_id", "arrival", "troops"}
	militaryActionColumnsWithoutDefault = []string{"id", "origin_id", "target_id", "arrival", "troops"}
	militaryActionColumnsWithDefault    = []string{}
	militaryActionPrimaryKeyColumns     = []string{"id"}
)

type (
	// MilitaryActionSlice is an alias for a slice of pointers to MilitaryAction.
	// This should generally be used opposed to []MilitaryAction.
	MilitaryActionSlice []*MilitaryAction
	// MilitaryActionHook is the signature for custom MilitaryAction hook methods
	MilitaryActionHook func(context.Context, boil.ContextExecutor, *MilitaryAction) error

	militaryActionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	militaryActionType                 = reflect.TypeOf(&MilitaryAction{})
	militaryActionMapping              = queries.MakeStructMapping(militaryActionType)
	militaryActionPrimaryKeyMapping, _ = queries.BindMapping(militaryActionType, militaryActionMapping, militaryActionPrimaryKeyColumns)
	militaryActionInsertCacheMut       sync.RWMutex
	militaryActionInsertCache          = make(map[string]insertCache)
	militaryActionUpdateCacheMut       sync.RWMutex
	militaryActionUpdateCache          = make(map[string]updateCache)
	militaryActionUpsertCacheMut       sync.RWMutex
	militaryActionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var militaryActionBeforeInsertHooks []MilitaryActionHook
var militaryActionBeforeUpdateHooks []MilitaryActionHook
var militaryActionBeforeDeleteHooks []MilitaryActionHook
var militaryActionBeforeUpsertHooks []MilitaryActionHook

var militaryActionAfterInsertHooks []MilitaryActionHook
var militaryActionAfterSelectHooks []MilitaryActionHook
var militaryActionAfterUpdateHooks []MilitaryActionHook
var militaryActionAfterDeleteHooks []MilitaryActionHook
var militaryActionAfterUpsertHooks []MilitaryActionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MilitaryAction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range militaryActionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MilitaryAction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range militaryActionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MilitaryAction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range militaryActionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MilitaryAction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range militaryActionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MilitaryAction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range militaryActionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MilitaryAction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range militaryActionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MilitaryAction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range militaryActionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MilitaryAction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range militaryActionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MilitaryAction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range militaryActionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMilitaryActionHook registers your hook function for all future operations.
func AddMilitaryActionHook(hookPoint boil.HookPoint, militaryActionHook MilitaryActionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		militaryActionBeforeInsertHooks = append(militaryActionBeforeInsertHooks, militaryActionHook)
	case boil.BeforeUpdateHook:
		militaryActionBeforeUpdateHooks = append(militaryActionBeforeUpdateHooks, militaryActionHook)
	case boil.BeforeDeleteHook:
		militaryActionBeforeDeleteHooks = append(militaryActionBeforeDeleteHooks, militaryActionHook)
	case boil.BeforeUpsertHook:
		militaryActionBeforeUpsertHooks = append(militaryActionBeforeUpsertHooks, militaryActionHook)
	case boil.AfterInsertHook:
		militaryActionAfterInsertHooks = append(militaryActionAfterInsertHooks, militaryActionHook)
	case boil.AfterSelectHook:
		militaryActionAfterSelectHooks = append(militaryActionAfterSelectHooks, militaryActionHook)
	case boil.AfterUpdateHook:
		militaryActionAfterUpdateHooks = append(militaryActionAfterUpdateHooks, militaryActionHook)
	case boil.AfterDeleteHook:
		militaryActionAfterDeleteHooks = append(militaryActionAfterDeleteHooks, militaryActionHook)
	case boil.AfterUpsertHook:
		militaryActionAfterUpsertHooks = append(militaryActionAfterUpsertHooks, militaryActionHook)
	}
}

// One returns a single militaryAction record from the query.
func (q militaryActionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MilitaryAction, error) {
	o := &MilitaryAction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for military_actions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MilitaryAction records from the query.
func (q militaryActionQuery) All(ctx context.Context, exec boil.ContextExecutor) (MilitaryActionSlice, error) {
	var o []*MilitaryAction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MilitaryAction slice")
	}

	if len(militaryActionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MilitaryAction records in the query.
func (q militaryActionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count military_actions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q militaryActionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if military_actions exists")
	}

	return count > 0, nil
}

// MilitaryActions retrieves all the records using an executor.
func MilitaryActions(mods ...qm.QueryMod) militaryActionQuery {
	mods = append(mods, qm.From("\"military_actions\""))
	return militaryActionQuery{NewQuery(mods...)}
}

// FindMilitaryAction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMilitaryAction(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MilitaryAction, error) {
	militaryActionObj := &MilitaryAction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"military_actions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, militaryActionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from military_actions")
	}

	return militaryActionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MilitaryAction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no military_actions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(militaryActionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	militaryActionInsertCacheMut.RLock()
	cache, cached := militaryActionInsertCache[key]
	militaryActionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			militaryActionColumns,
			militaryActionColumnsWithDefault,
			militaryActionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(militaryActionType, militaryActionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(militaryActionType, militaryActionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"military_actions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"military_actions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into military_actions")
	}

	if !cached {
		militaryActionInsertCacheMut.Lock()
		militaryActionInsertCache[key] = cache
		militaryActionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MilitaryAction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MilitaryAction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	militaryActionUpdateCacheMut.RLock()
	cache, cached := militaryActionUpdateCache[key]
	militaryActionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			militaryActionColumns,
			militaryActionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update military_actions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"military_actions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, militaryActionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(militaryActionType, militaryActionMapping, append(wl, militaryActionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update military_actions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for military_actions")
	}

	if !cached {
		militaryActionUpdateCacheMut.Lock()
		militaryActionUpdateCache[key] = cache
		militaryActionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q militaryActionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for military_actions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for military_actions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MilitaryActionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), militaryActionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"military_actions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, militaryActionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in militaryAction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all militaryAction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MilitaryAction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no military_actions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(militaryActionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	militaryActionUpsertCacheMut.RLock()
	cache, cached := militaryActionUpsertCache[key]
	militaryActionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			militaryActionColumns,
			militaryActionColumnsWithDefault,
			militaryActionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			militaryActionColumns,
			militaryActionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert military_actions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(militaryActionPrimaryKeyColumns))
			copy(conflict, militaryActionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"military_actions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(militaryActionType, militaryActionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(militaryActionType, militaryActionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert military_actions")
	}

	if !cached {
		militaryActionUpsertCacheMut.Lock()
		militaryActionUpsertCache[key] = cache
		militaryActionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MilitaryAction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MilitaryAction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MilitaryAction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), militaryActionPrimaryKeyMapping)
	sql := "DELETE FROM \"military_actions\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from military_actions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for military_actions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q militaryActionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no militaryActionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from military_actions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for military_actions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MilitaryActionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MilitaryAction slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(militaryActionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), militaryActionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"military_actions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, militaryActionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from militaryAction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for military_actions")
	}

	if len(militaryActionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MilitaryAction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMilitaryAction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MilitaryActionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MilitaryActionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), militaryActionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"military_actions\".* FROM \"military_actions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, militaryActionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MilitaryActionSlice")
	}

	*o = slice

	return nil
}

// MilitaryActionExists checks if the MilitaryAction row exists.
func MilitaryActionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"military_actions\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if military_actions exists")
	}

	return exists, nil
}
