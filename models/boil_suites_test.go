// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Alliances", testAlliances)
	t.Run("Cities", testCities)
	t.Run("Constructions", testConstructions)
	t.Run("Dungeons", testDungeons)
	t.Run("MilitaryActions", testMilitaryActions)
	t.Run("Upgrades", testUpgrades)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Alliances", testAlliancesDelete)
	t.Run("Cities", testCitiesDelete)
	t.Run("Constructions", testConstructionsDelete)
	t.Run("Dungeons", testDungeonsDelete)
	t.Run("MilitaryActions", testMilitaryActionsDelete)
	t.Run("Upgrades", testUpgradesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Alliances", testAlliancesQueryDeleteAll)
	t.Run("Cities", testCitiesQueryDeleteAll)
	t.Run("Constructions", testConstructionsQueryDeleteAll)
	t.Run("Dungeons", testDungeonsQueryDeleteAll)
	t.Run("MilitaryActions", testMilitaryActionsQueryDeleteAll)
	t.Run("Upgrades", testUpgradesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Alliances", testAlliancesSliceDeleteAll)
	t.Run("Cities", testCitiesSliceDeleteAll)
	t.Run("Constructions", testConstructionsSliceDeleteAll)
	t.Run("Dungeons", testDungeonsSliceDeleteAll)
	t.Run("MilitaryActions", testMilitaryActionsSliceDeleteAll)
	t.Run("Upgrades", testUpgradesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Alliances", testAlliancesExists)
	t.Run("Cities", testCitiesExists)
	t.Run("Constructions", testConstructionsExists)
	t.Run("Dungeons", testDungeonsExists)
	t.Run("MilitaryActions", testMilitaryActionsExists)
	t.Run("Upgrades", testUpgradesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Alliances", testAlliancesFind)
	t.Run("Cities", testCitiesFind)
	t.Run("Constructions", testConstructionsFind)
	t.Run("Dungeons", testDungeonsFind)
	t.Run("MilitaryActions", testMilitaryActionsFind)
	t.Run("Upgrades", testUpgradesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Alliances", testAlliancesBind)
	t.Run("Cities", testCitiesBind)
	t.Run("Constructions", testConstructionsBind)
	t.Run("Dungeons", testDungeonsBind)
	t.Run("MilitaryActions", testMilitaryActionsBind)
	t.Run("Upgrades", testUpgradesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Alliances", testAlliancesOne)
	t.Run("Cities", testCitiesOne)
	t.Run("Constructions", testConstructionsOne)
	t.Run("Dungeons", testDungeonsOne)
	t.Run("MilitaryActions", testMilitaryActionsOne)
	t.Run("Upgrades", testUpgradesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Alliances", testAlliancesAll)
	t.Run("Cities", testCitiesAll)
	t.Run("Constructions", testConstructionsAll)
	t.Run("Dungeons", testDungeonsAll)
	t.Run("MilitaryActions", testMilitaryActionsAll)
	t.Run("Upgrades", testUpgradesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Alliances", testAlliancesCount)
	t.Run("Cities", testCitiesCount)
	t.Run("Constructions", testConstructionsCount)
	t.Run("Dungeons", testDungeonsCount)
	t.Run("MilitaryActions", testMilitaryActionsCount)
	t.Run("Upgrades", testUpgradesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Alliances", testAlliancesHooks)
	t.Run("Cities", testCitiesHooks)
	t.Run("Constructions", testConstructionsHooks)
	t.Run("Dungeons", testDungeonsHooks)
	t.Run("MilitaryActions", testMilitaryActionsHooks)
	t.Run("Upgrades", testUpgradesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Alliances", testAlliancesInsert)
	t.Run("Alliances", testAlliancesInsertWhitelist)
	t.Run("Cities", testCitiesInsert)
	t.Run("Cities", testCitiesInsertWhitelist)
	t.Run("Constructions", testConstructionsInsert)
	t.Run("Constructions", testConstructionsInsertWhitelist)
	t.Run("Dungeons", testDungeonsInsert)
	t.Run("Dungeons", testDungeonsInsertWhitelist)
	t.Run("MilitaryActions", testMilitaryActionsInsert)
	t.Run("MilitaryActions", testMilitaryActionsInsertWhitelist)
	t.Run("Upgrades", testUpgradesInsert)
	t.Run("Upgrades", testUpgradesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Alliances", testAlliancesReload)
	t.Run("Cities", testCitiesReload)
	t.Run("Constructions", testConstructionsReload)
	t.Run("Dungeons", testDungeonsReload)
	t.Run("MilitaryActions", testMilitaryActionsReload)
	t.Run("Upgrades", testUpgradesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Alliances", testAlliancesReloadAll)
	t.Run("Cities", testCitiesReloadAll)
	t.Run("Constructions", testConstructionsReloadAll)
	t.Run("Dungeons", testDungeonsReloadAll)
	t.Run("MilitaryActions", testMilitaryActionsReloadAll)
	t.Run("Upgrades", testUpgradesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Alliances", testAlliancesSelect)
	t.Run("Cities", testCitiesSelect)
	t.Run("Constructions", testConstructionsSelect)
	t.Run("Dungeons", testDungeonsSelect)
	t.Run("MilitaryActions", testMilitaryActionsSelect)
	t.Run("Upgrades", testUpgradesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Alliances", testAlliancesUpdate)
	t.Run("Cities", testCitiesUpdate)
	t.Run("Constructions", testConstructionsUpdate)
	t.Run("Dungeons", testDungeonsUpdate)
	t.Run("MilitaryActions", testMilitaryActionsUpdate)
	t.Run("Upgrades", testUpgradesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Alliances", testAlliancesSliceUpdateAll)
	t.Run("Cities", testCitiesSliceUpdateAll)
	t.Run("Constructions", testConstructionsSliceUpdateAll)
	t.Run("Dungeons", testDungeonsSliceUpdateAll)
	t.Run("MilitaryActions", testMilitaryActionsSliceUpdateAll)
	t.Run("Upgrades", testUpgradesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
