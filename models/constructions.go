// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Construction is an object representing the database table.
type Construction struct {
	X           int       `boil:"x" json:"x" toml:"x" yaml:"x"`
	Y           int       `boil:"y" json:"y" toml:"y" yaml:"y"`
	CityX       int       `boil:"city_x" json:"city_x" toml:"city_x" yaml:"city_x"`
	CityY       int       `boil:"city_y" json:"city_y" toml:"city_y" yaml:"city_y"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Level       int       `boil:"level" json:"level" toml:"level" yaml:"level"`
	Type        int       `boil:"type" json:"type" toml:"type" yaml:"type"`
	Production  int       `boil:"production" json:"production" toml:"production" yaml:"production"`
	Modifier    int       `boil:"modifier" json:"modifier" toml:"modifier" yaml:"modifier"`
	NeedRefresh bool      `boil:"need_refresh" json:"need_refresh" toml:"need_refresh" yaml:"need_refresh"`

	R *constructionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L constructionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConstructionColumns = struct {
	X           string
	Y           string
	CityX       string
	CityY       string
	CreatedAt   string
	UpdatedAt   string
	Level       string
	Type        string
	Production  string
	Modifier    string
	NeedRefresh string
}{
	X:           "x",
	Y:           "y",
	CityX:       "city_x",
	CityY:       "city_y",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	Level:       "level",
	Type:        "type",
	Production:  "production",
	Modifier:    "modifier",
	NeedRefresh: "need_refresh",
}

// ConstructionRels is where relationship names are stored.
var ConstructionRels = struct {
}{}

// constructionR is where relationships are stored.
type constructionR struct {
}

// NewStruct creates a new relationship struct
func (*constructionR) NewStruct() *constructionR {
	return &constructionR{}
}

// constructionL is where Load methods for each relationship are stored.
type constructionL struct{}

var (
	constructionColumns               = []string{"x", "y", "city_x", "city_y", "created_at", "updated_at", "level", "type", "production", "modifier", "need_refresh"}
	constructionColumnsWithoutDefault = []string{"x", "y", "city_x", "city_y", "type"}
	constructionColumnsWithDefault    = []string{"created_at", "updated_at", "level", "production", "modifier", "need_refresh"}
	constructionPrimaryKeyColumns     = []string{"city_x", "city_y", "x", "y"}
)

type (
	// ConstructionSlice is an alias for a slice of pointers to Construction.
	// This should generally be used opposed to []Construction.
	ConstructionSlice []*Construction
	// ConstructionHook is the signature for custom Construction hook methods
	ConstructionHook func(context.Context, boil.ContextExecutor, *Construction) error

	constructionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	constructionType                 = reflect.TypeOf(&Construction{})
	constructionMapping              = queries.MakeStructMapping(constructionType)
	constructionPrimaryKeyMapping, _ = queries.BindMapping(constructionType, constructionMapping, constructionPrimaryKeyColumns)
	constructionInsertCacheMut       sync.RWMutex
	constructionInsertCache          = make(map[string]insertCache)
	constructionUpdateCacheMut       sync.RWMutex
	constructionUpdateCache          = make(map[string]updateCache)
	constructionUpsertCacheMut       sync.RWMutex
	constructionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var constructionBeforeInsertHooks []ConstructionHook
var constructionBeforeUpdateHooks []ConstructionHook
var constructionBeforeDeleteHooks []ConstructionHook
var constructionBeforeUpsertHooks []ConstructionHook

var constructionAfterInsertHooks []ConstructionHook
var constructionAfterSelectHooks []ConstructionHook
var constructionAfterUpdateHooks []ConstructionHook
var constructionAfterDeleteHooks []ConstructionHook
var constructionAfterUpsertHooks []ConstructionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Construction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range constructionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Construction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range constructionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Construction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range constructionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Construction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range constructionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Construction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range constructionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Construction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range constructionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Construction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range constructionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Construction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range constructionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Construction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range constructionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConstructionHook registers your hook function for all future operations.
func AddConstructionHook(hookPoint boil.HookPoint, constructionHook ConstructionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		constructionBeforeInsertHooks = append(constructionBeforeInsertHooks, constructionHook)
	case boil.BeforeUpdateHook:
		constructionBeforeUpdateHooks = append(constructionBeforeUpdateHooks, constructionHook)
	case boil.BeforeDeleteHook:
		constructionBeforeDeleteHooks = append(constructionBeforeDeleteHooks, constructionHook)
	case boil.BeforeUpsertHook:
		constructionBeforeUpsertHooks = append(constructionBeforeUpsertHooks, constructionHook)
	case boil.AfterInsertHook:
		constructionAfterInsertHooks = append(constructionAfterInsertHooks, constructionHook)
	case boil.AfterSelectHook:
		constructionAfterSelectHooks = append(constructionAfterSelectHooks, constructionHook)
	case boil.AfterUpdateHook:
		constructionAfterUpdateHooks = append(constructionAfterUpdateHooks, constructionHook)
	case boil.AfterDeleteHook:
		constructionAfterDeleteHooks = append(constructionAfterDeleteHooks, constructionHook)
	case boil.AfterUpsertHook:
		constructionAfterUpsertHooks = append(constructionAfterUpsertHooks, constructionHook)
	}
}

// One returns a single construction record from the query.
func (q constructionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Construction, error) {
	o := &Construction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for constructions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Construction records from the query.
func (q constructionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ConstructionSlice, error) {
	var o []*Construction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Construction slice")
	}

	if len(constructionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Construction records in the query.
func (q constructionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count constructions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q constructionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if constructions exists")
	}

	return count > 0, nil
}

// Constructions retrieves all the records using an executor.
func Constructions(mods ...qm.QueryMod) constructionQuery {
	mods = append(mods, qm.From("\"constructions\""))
	return constructionQuery{NewQuery(mods...)}
}

// FindConstruction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConstruction(ctx context.Context, exec boil.ContextExecutor, cityX int, cityY int, x int, y int, selectCols ...string) (*Construction, error) {
	constructionObj := &Construction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"constructions\" where \"city_x\"=$1 AND \"city_y\"=$2 AND \"x\"=$3 AND \"y\"=$4", sel,
	)

	q := queries.Raw(query, cityX, cityY, x, y)

	err := q.Bind(ctx, exec, constructionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from constructions")
	}

	return constructionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Construction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no constructions provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(constructionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	constructionInsertCacheMut.RLock()
	cache, cached := constructionInsertCache[key]
	constructionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			constructionColumns,
			constructionColumnsWithDefault,
			constructionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(constructionType, constructionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(constructionType, constructionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"constructions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"constructions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into constructions")
	}

	if !cached {
		constructionInsertCacheMut.Lock()
		constructionInsertCache[key] = cache
		constructionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Construction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Construction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	constructionUpdateCacheMut.RLock()
	cache, cached := constructionUpdateCache[key]
	constructionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			constructionColumns,
			constructionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update constructions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"constructions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, constructionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(constructionType, constructionMapping, append(wl, constructionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update constructions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for constructions")
	}

	if !cached {
		constructionUpdateCacheMut.Lock()
		constructionUpdateCache[key] = cache
		constructionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q constructionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for constructions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for constructions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConstructionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), constructionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"constructions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, constructionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in construction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all construction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Construction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no constructions provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(constructionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	constructionUpsertCacheMut.RLock()
	cache, cached := constructionUpsertCache[key]
	constructionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			constructionColumns,
			constructionColumnsWithDefault,
			constructionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			constructionColumns,
			constructionPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert constructions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(constructionPrimaryKeyColumns))
			copy(conflict, constructionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"constructions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(constructionType, constructionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(constructionType, constructionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert constructions")
	}

	if !cached {
		constructionUpsertCacheMut.Lock()
		constructionUpsertCache[key] = cache
		constructionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Construction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Construction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Construction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), constructionPrimaryKeyMapping)
	sql := "DELETE FROM \"constructions\" WHERE \"city_x\"=$1 AND \"city_y\"=$2 AND \"x\"=$3 AND \"y\"=$4"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from constructions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for constructions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q constructionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no constructionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from constructions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for constructions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConstructionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Construction slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(constructionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), constructionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"constructions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, constructionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from construction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for constructions")
	}

	if len(constructionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Construction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindConstruction(ctx, exec, o.CityX, o.CityY, o.X, o.Y)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConstructionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConstructionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), constructionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"constructions\".* FROM \"constructions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, constructionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ConstructionSlice")
	}

	*o = slice

	return nil
}

// ConstructionExists checks if the Construction row exists.
func ConstructionExists(ctx context.Context, exec boil.ContextExecutor, cityX int, cityY int, x int, y int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"constructions\" where \"city_x\"=$1 AND \"city_y\"=$2 AND \"x\"=$3 AND \"y\"=$4 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, cityX, cityY, x, y)
	}

	row := exec.QueryRowContext(ctx, sql, cityX, cityY, x, y)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if constructions exists")
	}

	return exists, nil
}
