// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTiles(t *testing.T) {
	t.Parallel()

	query := Tiles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTilesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tile{}
	if err = randomize.Struct(seed, o, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTilesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tile{}
	if err = randomize.Struct(seed, o, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Tiles().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTilesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tile{}
	if err = randomize.Struct(seed, o, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TileSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTilesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tile{}
	if err = randomize.Struct(seed, o, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TileExists(ctx, tx, o.X, o.Y, o.ContinentX, o.ContinentY)
	if err != nil {
		t.Errorf("Unable to check if Tile exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TileExists to return true, but got false.")
	}
}

func testTilesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tile{}
	if err = randomize.Struct(seed, o, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tileFound, err := FindTile(ctx, tx, o.X, o.Y, o.ContinentX, o.ContinentY)
	if err != nil {
		t.Error(err)
	}

	if tileFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTilesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tile{}
	if err = randomize.Struct(seed, o, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Tiles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTilesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tile{}
	if err = randomize.Struct(seed, o, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Tiles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTilesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tileOne := &Tile{}
	tileTwo := &Tile{}
	if err = randomize.Struct(seed, tileOne, tileDBTypes, false, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}
	if err = randomize.Struct(seed, tileTwo, tileDBTypes, false, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTilesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tileOne := &Tile{}
	tileTwo := &Tile{}
	if err = randomize.Struct(seed, tileOne, tileDBTypes, false, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}
	if err = randomize.Struct(seed, tileTwo, tileDBTypes, false, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = tileOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tileTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tileBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Tile) error {
	*o = Tile{}
	return nil
}

func tileAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Tile) error {
	*o = Tile{}
	return nil
}

func tileAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Tile) error {
	*o = Tile{}
	return nil
}

func tileBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Tile) error {
	*o = Tile{}
	return nil
}

func tileAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Tile) error {
	*o = Tile{}
	return nil
}

func tileBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Tile) error {
	*o = Tile{}
	return nil
}

func tileAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Tile) error {
	*o = Tile{}
	return nil
}

func tileBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Tile) error {
	*o = Tile{}
	return nil
}

func tileAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Tile) error {
	*o = Tile{}
	return nil
}

func testTilesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Tile{}
	o := &Tile{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tileDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Tile object: %s", err)
	}

	AddTileHook(boil.BeforeInsertHook, tileBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tileBeforeInsertHooks = []TileHook{}

	AddTileHook(boil.AfterInsertHook, tileAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tileAfterInsertHooks = []TileHook{}

	AddTileHook(boil.AfterSelectHook, tileAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tileAfterSelectHooks = []TileHook{}

	AddTileHook(boil.BeforeUpdateHook, tileBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tileBeforeUpdateHooks = []TileHook{}

	AddTileHook(boil.AfterUpdateHook, tileAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tileAfterUpdateHooks = []TileHook{}

	AddTileHook(boil.BeforeDeleteHook, tileBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tileBeforeDeleteHooks = []TileHook{}

	AddTileHook(boil.AfterDeleteHook, tileAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tileAfterDeleteHooks = []TileHook{}

	AddTileHook(boil.BeforeUpsertHook, tileBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tileBeforeUpsertHooks = []TileHook{}

	AddTileHook(boil.AfterUpsertHook, tileAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tileAfterUpsertHooks = []TileHook{}
}

func testTilesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tile{}
	if err = randomize.Struct(seed, o, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTilesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tile{}
	if err = randomize.Struct(seed, o, tileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(tileColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Tiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTileToManyXCities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.X = a.X
	c.X = a.X

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	city, err := a.XCities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range city {
		if v.X == b.X {
			bFound = true
		}
		if v.X == c.X {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXCities(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XCities = nil
	if err = a.L.LoadXCities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", city)
	}
}

func testTileToManyXCities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.X = a.Y
	c.X = a.Y

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	city, err := a.XCities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range city {
		if v.X == b.X {
			bFound = true
		}
		if v.X == c.X {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXCities(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XCities = nil
	if err = a.L.LoadXCities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", city)
	}
}

func testTileToManyXCities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.X = a.ContinentX
	c.X = a.ContinentX

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	city, err := a.XCities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range city {
		if v.X == b.X {
			bFound = true
		}
		if v.X == c.X {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXCities(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XCities = nil
	if err = a.L.LoadXCities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", city)
	}
}

func testTileToManyXCities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.X = a.ContinentY
	c.X = a.ContinentY

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	city, err := a.XCities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range city {
		if v.X == b.X {
			bFound = true
		}
		if v.X == c.X {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXCities(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XCities = nil
	if err = a.L.LoadXCities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", city)
	}
}

func testTileToManyXCities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Y = a.X
	c.Y = a.X

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	city, err := a.XCities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range city {
		if v.Y == b.Y {
			bFound = true
		}
		if v.Y == c.Y {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXCities(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XCities = nil
	if err = a.L.LoadXCities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", city)
	}
}

func testTileToManyXCities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Y = a.Y
	c.Y = a.Y

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	city, err := a.XCities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range city {
		if v.Y == b.Y {
			bFound = true
		}
		if v.Y == c.Y {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXCities(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XCities = nil
	if err = a.L.LoadXCities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", city)
	}
}

func testTileToManyXCities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Y = a.ContinentX
	c.Y = a.ContinentX

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	city, err := a.XCities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range city {
		if v.Y == b.Y {
			bFound = true
		}
		if v.Y == c.Y {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXCities(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XCities = nil
	if err = a.L.LoadXCities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", city)
	}
}

func testTileToManyXCities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Y = a.ContinentY
	c.Y = a.ContinentY

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	city, err := a.XCities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range city {
		if v.Y == b.Y {
			bFound = true
		}
		if v.Y == c.Y {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXCities(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XCities = nil
	if err = a.L.LoadXCities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", city)
	}
}

func testTileToManyXCities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContinentX = a.X
	c.ContinentX = a.X

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	city, err := a.XCities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range city {
		if v.ContinentX == b.ContinentX {
			bFound = true
		}
		if v.ContinentX == c.ContinentX {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXCities(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XCities = nil
	if err = a.L.LoadXCities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", city)
	}
}

func testTileToManyXCities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContinentX = a.Y
	c.ContinentX = a.Y

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	city, err := a.XCities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range city {
		if v.ContinentX == b.ContinentX {
			bFound = true
		}
		if v.ContinentX == c.ContinentX {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXCities(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XCities = nil
	if err = a.L.LoadXCities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", city)
	}
}

func testTileToManyXCities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContinentX = a.ContinentX
	c.ContinentX = a.ContinentX

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	city, err := a.XCities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range city {
		if v.ContinentX == b.ContinentX {
			bFound = true
		}
		if v.ContinentX == c.ContinentX {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXCities(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XCities = nil
	if err = a.L.LoadXCities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", city)
	}
}

func testTileToManyXCities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContinentX = a.ContinentY
	c.ContinentX = a.ContinentY

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	city, err := a.XCities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range city {
		if v.ContinentX == b.ContinentX {
			bFound = true
		}
		if v.ContinentX == c.ContinentX {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXCities(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XCities = nil
	if err = a.L.LoadXCities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", city)
	}
}

func testTileToManyXCities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContinentY = a.X
	c.ContinentY = a.X

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	city, err := a.XCities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range city {
		if v.ContinentY == b.ContinentY {
			bFound = true
		}
		if v.ContinentY == c.ContinentY {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXCities(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XCities = nil
	if err = a.L.LoadXCities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", city)
	}
}

func testTileToManyXCities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContinentY = a.Y
	c.ContinentY = a.Y

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	city, err := a.XCities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range city {
		if v.ContinentY == b.ContinentY {
			bFound = true
		}
		if v.ContinentY == c.ContinentY {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXCities(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XCities = nil
	if err = a.L.LoadXCities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", city)
	}
}

func testTileToManyXCities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContinentY = a.ContinentX
	c.ContinentY = a.ContinentX

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	city, err := a.XCities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range city {
		if v.ContinentY == b.ContinentY {
			bFound = true
		}
		if v.ContinentY == c.ContinentY {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXCities(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XCities = nil
	if err = a.L.LoadXCities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", city)
	}
}

func testTileToManyXCities(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContinentY = a.ContinentY
	c.ContinentY = a.ContinentY

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	city, err := a.XCities().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range city {
		if v.ContinentY == b.ContinentY {
			bFound = true
		}
		if v.ContinentY == c.ContinentY {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXCities(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XCities = nil
	if err = a.L.LoadXCities(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XCities); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", city)
	}
}

func testTileToManyXDungeons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.X = a.X
	c.X = a.X

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dungeon, err := a.XDungeons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dungeon {
		if v.X == b.X {
			bFound = true
		}
		if v.X == c.X {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXDungeons(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XDungeons = nil
	if err = a.L.LoadXDungeons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dungeon)
	}
}

func testTileToManyXDungeons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.X = a.Y
	c.X = a.Y

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dungeon, err := a.XDungeons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dungeon {
		if v.X == b.X {
			bFound = true
		}
		if v.X == c.X {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXDungeons(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XDungeons = nil
	if err = a.L.LoadXDungeons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dungeon)
	}
}

func testTileToManyXDungeons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.X = a.ContinentX
	c.X = a.ContinentX

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dungeon, err := a.XDungeons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dungeon {
		if v.X == b.X {
			bFound = true
		}
		if v.X == c.X {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXDungeons(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XDungeons = nil
	if err = a.L.LoadXDungeons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dungeon)
	}
}

func testTileToManyXDungeons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.X = a.ContinentY
	c.X = a.ContinentY

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dungeon, err := a.XDungeons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dungeon {
		if v.X == b.X {
			bFound = true
		}
		if v.X == c.X {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXDungeons(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XDungeons = nil
	if err = a.L.LoadXDungeons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dungeon)
	}
}

func testTileToManyXDungeons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Y = a.X
	c.Y = a.X

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dungeon, err := a.XDungeons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dungeon {
		if v.Y == b.Y {
			bFound = true
		}
		if v.Y == c.Y {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXDungeons(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XDungeons = nil
	if err = a.L.LoadXDungeons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dungeon)
	}
}

func testTileToManyXDungeons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Y = a.Y
	c.Y = a.Y

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dungeon, err := a.XDungeons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dungeon {
		if v.Y == b.Y {
			bFound = true
		}
		if v.Y == c.Y {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXDungeons(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XDungeons = nil
	if err = a.L.LoadXDungeons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dungeon)
	}
}

func testTileToManyXDungeons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Y = a.ContinentX
	c.Y = a.ContinentX

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dungeon, err := a.XDungeons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dungeon {
		if v.Y == b.Y {
			bFound = true
		}
		if v.Y == c.Y {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXDungeons(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XDungeons = nil
	if err = a.L.LoadXDungeons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dungeon)
	}
}

func testTileToManyXDungeons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Y = a.ContinentY
	c.Y = a.ContinentY

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dungeon, err := a.XDungeons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dungeon {
		if v.Y == b.Y {
			bFound = true
		}
		if v.Y == c.Y {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXDungeons(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XDungeons = nil
	if err = a.L.LoadXDungeons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dungeon)
	}
}

func testTileToManyXDungeons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContinentX = a.X
	c.ContinentX = a.X

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dungeon, err := a.XDungeons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dungeon {
		if v.ContinentX == b.ContinentX {
			bFound = true
		}
		if v.ContinentX == c.ContinentX {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXDungeons(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XDungeons = nil
	if err = a.L.LoadXDungeons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dungeon)
	}
}

func testTileToManyXDungeons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContinentX = a.Y
	c.ContinentX = a.Y

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dungeon, err := a.XDungeons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dungeon {
		if v.ContinentX == b.ContinentX {
			bFound = true
		}
		if v.ContinentX == c.ContinentX {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXDungeons(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XDungeons = nil
	if err = a.L.LoadXDungeons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dungeon)
	}
}

func testTileToManyXDungeons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContinentX = a.ContinentX
	c.ContinentX = a.ContinentX

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dungeon, err := a.XDungeons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dungeon {
		if v.ContinentX == b.ContinentX {
			bFound = true
		}
		if v.ContinentX == c.ContinentX {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXDungeons(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XDungeons = nil
	if err = a.L.LoadXDungeons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dungeon)
	}
}

func testTileToManyXDungeons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContinentX = a.ContinentY
	c.ContinentX = a.ContinentY

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dungeon, err := a.XDungeons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dungeon {
		if v.ContinentX == b.ContinentX {
			bFound = true
		}
		if v.ContinentX == c.ContinentX {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXDungeons(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XDungeons = nil
	if err = a.L.LoadXDungeons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dungeon)
	}
}

func testTileToManyXDungeons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContinentY = a.X
	c.ContinentY = a.X

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dungeon, err := a.XDungeons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dungeon {
		if v.ContinentY == b.ContinentY {
			bFound = true
		}
		if v.ContinentY == c.ContinentY {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXDungeons(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XDungeons = nil
	if err = a.L.LoadXDungeons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dungeon)
	}
}

func testTileToManyXDungeons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContinentY = a.Y
	c.ContinentY = a.Y

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dungeon, err := a.XDungeons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dungeon {
		if v.ContinentY == b.ContinentY {
			bFound = true
		}
		if v.ContinentY == c.ContinentY {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXDungeons(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XDungeons = nil
	if err = a.L.LoadXDungeons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dungeon)
	}
}

func testTileToManyXDungeons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContinentY = a.ContinentX
	c.ContinentY = a.ContinentX

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dungeon, err := a.XDungeons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dungeon {
		if v.ContinentY == b.ContinentY {
			bFound = true
		}
		if v.ContinentY == c.ContinentY {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXDungeons(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XDungeons = nil
	if err = a.L.LoadXDungeons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dungeon)
	}
}

func testTileToManyXDungeons(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dungeonDBTypes, false, dungeonColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ContinentY = a.ContinentY
	c.ContinentY = a.ContinentY

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	dungeon, err := a.XDungeons().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range dungeon {
		if v.ContinentY == b.ContinentY {
			bFound = true
		}
		if v.ContinentY == c.ContinentY {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TileSlice{&a}
	if err = a.L.LoadXDungeons(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.XDungeons = nil
	if err = a.L.LoadXDungeons(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.XDungeons); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", dungeon)
	}
}

func testTileToManyAddOpXCities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*City{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*City{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXCities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.X != first.X {
			t.Error("foreign key was wrong value", a.X, first.X)
		}
		if a.X != second.X {
			t.Error("foreign key was wrong value", a.X, second.X)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XCities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XCities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XCities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXCities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*City{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*City{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXCities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Y != first.X {
			t.Error("foreign key was wrong value", a.Y, first.X)
		}
		if a.Y != second.X {
			t.Error("foreign key was wrong value", a.Y, second.X)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XCities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XCities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XCities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXCities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*City{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*City{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXCities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ContinentX != first.X {
			t.Error("foreign key was wrong value", a.ContinentX, first.X)
		}
		if a.ContinentX != second.X {
			t.Error("foreign key was wrong value", a.ContinentX, second.X)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XCities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XCities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XCities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXCities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*City{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*City{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXCities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ContinentY != first.X {
			t.Error("foreign key was wrong value", a.ContinentY, first.X)
		}
		if a.ContinentY != second.X {
			t.Error("foreign key was wrong value", a.ContinentY, second.X)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XCities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XCities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XCities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXCities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*City{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*City{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXCities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.X != first.Y {
			t.Error("foreign key was wrong value", a.X, first.Y)
		}
		if a.X != second.Y {
			t.Error("foreign key was wrong value", a.X, second.Y)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XCities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XCities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XCities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXCities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*City{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*City{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXCities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Y != first.Y {
			t.Error("foreign key was wrong value", a.Y, first.Y)
		}
		if a.Y != second.Y {
			t.Error("foreign key was wrong value", a.Y, second.Y)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XCities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XCities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XCities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXCities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*City{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*City{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXCities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ContinentX != first.Y {
			t.Error("foreign key was wrong value", a.ContinentX, first.Y)
		}
		if a.ContinentX != second.Y {
			t.Error("foreign key was wrong value", a.ContinentX, second.Y)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XCities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XCities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XCities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXCities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*City{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*City{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXCities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ContinentY != first.Y {
			t.Error("foreign key was wrong value", a.ContinentY, first.Y)
		}
		if a.ContinentY != second.Y {
			t.Error("foreign key was wrong value", a.ContinentY, second.Y)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XCities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XCities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XCities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXCities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*City{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*City{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXCities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.X != first.ContinentX {
			t.Error("foreign key was wrong value", a.X, first.ContinentX)
		}
		if a.X != second.ContinentX {
			t.Error("foreign key was wrong value", a.X, second.ContinentX)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XCities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XCities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XCities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXCities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*City{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*City{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXCities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Y != first.ContinentX {
			t.Error("foreign key was wrong value", a.Y, first.ContinentX)
		}
		if a.Y != second.ContinentX {
			t.Error("foreign key was wrong value", a.Y, second.ContinentX)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XCities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XCities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XCities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXCities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*City{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*City{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXCities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ContinentX != first.ContinentX {
			t.Error("foreign key was wrong value", a.ContinentX, first.ContinentX)
		}
		if a.ContinentX != second.ContinentX {
			t.Error("foreign key was wrong value", a.ContinentX, second.ContinentX)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XCities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XCities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XCities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXCities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*City{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*City{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXCities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ContinentY != first.ContinentX {
			t.Error("foreign key was wrong value", a.ContinentY, first.ContinentX)
		}
		if a.ContinentY != second.ContinentX {
			t.Error("foreign key was wrong value", a.ContinentY, second.ContinentX)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XCities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XCities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XCities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXCities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*City{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*City{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXCities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.X != first.ContinentY {
			t.Error("foreign key was wrong value", a.X, first.ContinentY)
		}
		if a.X != second.ContinentY {
			t.Error("foreign key was wrong value", a.X, second.ContinentY)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XCities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XCities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XCities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXCities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*City{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*City{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXCities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Y != first.ContinentY {
			t.Error("foreign key was wrong value", a.Y, first.ContinentY)
		}
		if a.Y != second.ContinentY {
			t.Error("foreign key was wrong value", a.Y, second.ContinentY)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XCities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XCities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XCities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXCities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*City{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*City{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXCities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ContinentX != first.ContinentY {
			t.Error("foreign key was wrong value", a.ContinentX, first.ContinentY)
		}
		if a.ContinentX != second.ContinentY {
			t.Error("foreign key was wrong value", a.ContinentX, second.ContinentY)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XCities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XCities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XCities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXCities(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*City{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*City{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXCities(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ContinentY != first.ContinentY {
			t.Error("foreign key was wrong value", a.ContinentY, first.ContinentY)
		}
		if a.ContinentY != second.ContinentY {
			t.Error("foreign key was wrong value", a.ContinentY, second.ContinentY)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XCities[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XCities[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XCities().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXDungeons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dungeon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dungeonDBTypes, false, strmangle.SetComplement(dungeonPrimaryKeyColumns, dungeonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dungeon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXDungeons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.X != first.X {
			t.Error("foreign key was wrong value", a.X, first.X)
		}
		if a.X != second.X {
			t.Error("foreign key was wrong value", a.X, second.X)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XDungeons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XDungeons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XDungeons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXDungeons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dungeon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dungeonDBTypes, false, strmangle.SetComplement(dungeonPrimaryKeyColumns, dungeonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dungeon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXDungeons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Y != first.X {
			t.Error("foreign key was wrong value", a.Y, first.X)
		}
		if a.Y != second.X {
			t.Error("foreign key was wrong value", a.Y, second.X)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XDungeons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XDungeons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XDungeons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXDungeons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dungeon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dungeonDBTypes, false, strmangle.SetComplement(dungeonPrimaryKeyColumns, dungeonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dungeon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXDungeons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ContinentX != first.X {
			t.Error("foreign key was wrong value", a.ContinentX, first.X)
		}
		if a.ContinentX != second.X {
			t.Error("foreign key was wrong value", a.ContinentX, second.X)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XDungeons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XDungeons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XDungeons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXDungeons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dungeon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dungeonDBTypes, false, strmangle.SetComplement(dungeonPrimaryKeyColumns, dungeonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dungeon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXDungeons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ContinentY != first.X {
			t.Error("foreign key was wrong value", a.ContinentY, first.X)
		}
		if a.ContinentY != second.X {
			t.Error("foreign key was wrong value", a.ContinentY, second.X)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XDungeons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XDungeons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XDungeons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXDungeons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dungeon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dungeonDBTypes, false, strmangle.SetComplement(dungeonPrimaryKeyColumns, dungeonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dungeon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXDungeons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.X != first.Y {
			t.Error("foreign key was wrong value", a.X, first.Y)
		}
		if a.X != second.Y {
			t.Error("foreign key was wrong value", a.X, second.Y)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XDungeons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XDungeons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XDungeons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXDungeons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dungeon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dungeonDBTypes, false, strmangle.SetComplement(dungeonPrimaryKeyColumns, dungeonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dungeon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXDungeons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Y != first.Y {
			t.Error("foreign key was wrong value", a.Y, first.Y)
		}
		if a.Y != second.Y {
			t.Error("foreign key was wrong value", a.Y, second.Y)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XDungeons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XDungeons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XDungeons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXDungeons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dungeon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dungeonDBTypes, false, strmangle.SetComplement(dungeonPrimaryKeyColumns, dungeonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dungeon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXDungeons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ContinentX != first.Y {
			t.Error("foreign key was wrong value", a.ContinentX, first.Y)
		}
		if a.ContinentX != second.Y {
			t.Error("foreign key was wrong value", a.ContinentX, second.Y)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XDungeons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XDungeons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XDungeons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXDungeons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dungeon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dungeonDBTypes, false, strmangle.SetComplement(dungeonPrimaryKeyColumns, dungeonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dungeon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXDungeons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ContinentY != first.Y {
			t.Error("foreign key was wrong value", a.ContinentY, first.Y)
		}
		if a.ContinentY != second.Y {
			t.Error("foreign key was wrong value", a.ContinentY, second.Y)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XDungeons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XDungeons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XDungeons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXDungeons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dungeon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dungeonDBTypes, false, strmangle.SetComplement(dungeonPrimaryKeyColumns, dungeonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dungeon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXDungeons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.X != first.ContinentX {
			t.Error("foreign key was wrong value", a.X, first.ContinentX)
		}
		if a.X != second.ContinentX {
			t.Error("foreign key was wrong value", a.X, second.ContinentX)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XDungeons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XDungeons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XDungeons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXDungeons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dungeon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dungeonDBTypes, false, strmangle.SetComplement(dungeonPrimaryKeyColumns, dungeonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dungeon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXDungeons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Y != first.ContinentX {
			t.Error("foreign key was wrong value", a.Y, first.ContinentX)
		}
		if a.Y != second.ContinentX {
			t.Error("foreign key was wrong value", a.Y, second.ContinentX)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XDungeons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XDungeons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XDungeons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXDungeons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dungeon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dungeonDBTypes, false, strmangle.SetComplement(dungeonPrimaryKeyColumns, dungeonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dungeon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXDungeons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ContinentX != first.ContinentX {
			t.Error("foreign key was wrong value", a.ContinentX, first.ContinentX)
		}
		if a.ContinentX != second.ContinentX {
			t.Error("foreign key was wrong value", a.ContinentX, second.ContinentX)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XDungeons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XDungeons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XDungeons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXDungeons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dungeon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dungeonDBTypes, false, strmangle.SetComplement(dungeonPrimaryKeyColumns, dungeonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dungeon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXDungeons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ContinentY != first.ContinentX {
			t.Error("foreign key was wrong value", a.ContinentY, first.ContinentX)
		}
		if a.ContinentY != second.ContinentX {
			t.Error("foreign key was wrong value", a.ContinentY, second.ContinentX)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XDungeons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XDungeons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XDungeons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXDungeons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dungeon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dungeonDBTypes, false, strmangle.SetComplement(dungeonPrimaryKeyColumns, dungeonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dungeon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXDungeons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.X != first.ContinentY {
			t.Error("foreign key was wrong value", a.X, first.ContinentY)
		}
		if a.X != second.ContinentY {
			t.Error("foreign key was wrong value", a.X, second.ContinentY)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XDungeons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XDungeons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XDungeons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXDungeons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dungeon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dungeonDBTypes, false, strmangle.SetComplement(dungeonPrimaryKeyColumns, dungeonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dungeon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXDungeons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Y != first.ContinentY {
			t.Error("foreign key was wrong value", a.Y, first.ContinentY)
		}
		if a.Y != second.ContinentY {
			t.Error("foreign key was wrong value", a.Y, second.ContinentY)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XDungeons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XDungeons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XDungeons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXDungeons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dungeon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dungeonDBTypes, false, strmangle.SetComplement(dungeonPrimaryKeyColumns, dungeonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dungeon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXDungeons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ContinentX != first.ContinentY {
			t.Error("foreign key was wrong value", a.ContinentX, first.ContinentY)
		}
		if a.ContinentX != second.ContinentY {
			t.Error("foreign key was wrong value", a.ContinentX, second.ContinentY)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XDungeons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XDungeons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XDungeons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToManyAddOpXDungeons(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c, d, e Dungeon

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Dungeon{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, dungeonDBTypes, false, strmangle.SetComplement(dungeonPrimaryKeyColumns, dungeonColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Dungeon{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddXDungeons(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ContinentY != first.ContinentY {
			t.Error("foreign key was wrong value", a.ContinentY, first.ContinentY)
		}
		if a.ContinentY != second.ContinentY {
			t.Error("foreign key was wrong value", a.ContinentY, second.ContinentY)
		}

		if first.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.X != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.XDungeons[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.XDungeons[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.XDungeons().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTileToOneContinentUsingContinentX(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Tile
	var foreign Continent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tileDBTypes, false, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, continentDBTypes, false, continentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Continent struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ContinentX = foreign.X
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ContinentX().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.X != foreign.X {
		t.Errorf("want: %v, got %v", foreign.X, check.X)
	}

	slice := TileSlice{&local}
	if err = local.L.LoadContinentX(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ContinentX == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ContinentX = nil
	if err = local.L.LoadContinentX(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ContinentX == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTileToOneContinentUsingContinentX(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Tile
	var foreign Continent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tileDBTypes, false, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, continentDBTypes, false, continentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Continent struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ContinentX = foreign.Y
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ContinentX().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.Y != foreign.Y {
		t.Errorf("want: %v, got %v", foreign.Y, check.Y)
	}

	slice := TileSlice{&local}
	if err = local.L.LoadContinentX(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ContinentX == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ContinentX = nil
	if err = local.L.LoadContinentX(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ContinentX == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTileToOneContinentUsingContinentX(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Tile
	var foreign Continent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tileDBTypes, false, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, continentDBTypes, false, continentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Continent struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ContinentY = foreign.X
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ContinentX().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.X != foreign.X {
		t.Errorf("want: %v, got %v", foreign.X, check.X)
	}

	slice := TileSlice{&local}
	if err = local.L.LoadContinentX(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ContinentX == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ContinentX = nil
	if err = local.L.LoadContinentX(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ContinentX == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTileToOneContinentUsingContinentX(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Tile
	var foreign Continent

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tileDBTypes, false, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, continentDBTypes, false, continentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Continent struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ContinentY = foreign.Y
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ContinentX().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.Y != foreign.Y {
		t.Errorf("want: %v, got %v", foreign.Y, check.Y)
	}

	slice := TileSlice{&local}
	if err = local.L.LoadContinentX(ctx, tx, false, (*[]*Tile)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ContinentX == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ContinentX = nil
	if err = local.L.LoadContinentX(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ContinentX == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTileToOneSetOpContinentUsingContinentX(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Continent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, continentDBTypes, false, strmangle.SetComplement(continentPrimaryKeyColumns, continentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, continentDBTypes, false, strmangle.SetComplement(continentPrimaryKeyColumns, continentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Continent{&b, &c} {
		err = a.SetContinentX(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ContinentX != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ContinentXTiles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ContinentX != x.X {
			t.Error("foreign key was wrong value", a.ContinentX)
		}

		if exists, err := TileExists(ctx, tx, a.X, a.Y, a.ContinentX, a.ContinentY); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testTileToOneSetOpContinentUsingContinentX(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Continent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, continentDBTypes, false, strmangle.SetComplement(continentPrimaryKeyColumns, continentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, continentDBTypes, false, strmangle.SetComplement(continentPrimaryKeyColumns, continentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Continent{&b, &c} {
		err = a.SetContinentX(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ContinentX != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ContinentXTiles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ContinentX != x.Y {
			t.Error("foreign key was wrong value", a.ContinentX)
		}

		if exists, err := TileExists(ctx, tx, a.X, a.Y, a.ContinentX, a.ContinentY); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testTileToOneSetOpContinentUsingContinentX(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Continent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, continentDBTypes, false, strmangle.SetComplement(continentPrimaryKeyColumns, continentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, continentDBTypes, false, strmangle.SetComplement(continentPrimaryKeyColumns, continentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Continent{&b, &c} {
		err = a.SetContinentX(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ContinentX != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ContinentXTiles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ContinentY != x.X {
			t.Error("foreign key was wrong value", a.ContinentY)
		}

		if exists, err := TileExists(ctx, tx, a.X, a.Y, a.ContinentX, a.ContinentY); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testTileToOneSetOpContinentUsingContinentX(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Tile
	var b, c Continent

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tileDBTypes, false, strmangle.SetComplement(tilePrimaryKeyColumns, tileColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, continentDBTypes, false, strmangle.SetComplement(continentPrimaryKeyColumns, continentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, continentDBTypes, false, strmangle.SetComplement(continentPrimaryKeyColumns, continentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Continent{&b, &c} {
		err = a.SetContinentX(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ContinentX != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ContinentXTiles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ContinentY != x.Y {
			t.Error("foreign key was wrong value", a.ContinentY)
		}

		if exists, err := TileExists(ctx, tx, a.X, a.Y, a.ContinentX, a.ContinentY); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testTilesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tile{}
	if err = randomize.Struct(seed, o, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTilesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tile{}
	if err = randomize.Struct(seed, o, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TileSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTilesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Tile{}
	if err = randomize.Struct(seed, o, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tiles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tileDBTypes = map[string]string{`ContinentX`: `smallint`, `ContinentY`: `smallint`, `OccupiedBy`: `character varying`, `X`: `smallint`, `Y`: `smallint`}
	_           = bytes.MinRead
)

func testTilesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tilePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tileColumns) == len(tilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Tile{}
	if err = randomize.Struct(seed, o, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tileDBTypes, true, tilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTilesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tileColumns) == len(tilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Tile{}
	if err = randomize.Struct(seed, o, tileDBTypes, true, tileColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tileDBTypes, true, tilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tileColumns, tilePrimaryKeyColumns) {
		fields = tileColumns
	} else {
		fields = strmangle.SetComplement(
			tileColumns,
			tilePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TileSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTilesUpsert(t *testing.T) {
	t.Parallel()

	if len(tileColumns) == len(tilePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Tile{}
	if err = randomize.Struct(seed, &o, tileDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Tile: %s", err)
	}

	count, err := Tiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tileDBTypes, false, tilePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Tile struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Tile: %s", err)
	}

	count, err = Tiles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
