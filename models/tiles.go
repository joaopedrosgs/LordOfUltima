// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Tile is an object representing the database table.
type Tile struct {
	X          int16  `boil:"x" json:"x" toml:"x" yaml:"x"`
	Y          int16  `boil:"y" json:"y" toml:"y" yaml:"y"`
	ContinentX int16  `boil:"continent_x" json:"continent_x" toml:"continent_x" yaml:"continent_x"`
	ContinentY int16  `boil:"continent_y" json:"continent_y" toml:"continent_y" yaml:"continent_y"`
	OccupiedBy string `boil:"occupied_by" json:"occupied_by" toml:"occupied_by" yaml:"occupied_by"`

	R *tileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TileColumns = struct {
	X          string
	Y          string
	ContinentX string
	ContinentY string
	OccupiedBy string
}{
	X:          "x",
	Y:          "y",
	ContinentX: "continent_x",
	ContinentY: "continent_y",
	OccupiedBy: "occupied_by",
}

// TileRels is where relationship names are stored.
var TileRels = struct {
	ContinentX string
	ContinentX string
	ContinentX string
	ContinentX string
	XCities    string
	XCities    string
	XCities    string
	XCities    string
	XCities    string
	XCities    string
	XCities    string
	XCities    string
	XCities    string
	XCities    string
	XCities    string
	XCities    string
	XCities    string
	XCities    string
	XCities    string
	XCities    string
	XDungeons  string
	XDungeons  string
	XDungeons  string
	XDungeons  string
	XDungeons  string
	XDungeons  string
	XDungeons  string
	XDungeons  string
	XDungeons  string
	XDungeons  string
	XDungeons  string
	XDungeons  string
	XDungeons  string
	XDungeons  string
	XDungeons  string
	XDungeons  string
}{
	ContinentX: "ContinentX",
	ContinentX: "ContinentX",
	ContinentX: "ContinentX",
	ContinentX: "ContinentX",
	XCities:    "XCities",
	XCities:    "XCities",
	XCities:    "XCities",
	XCities:    "XCities",
	XCities:    "XCities",
	XCities:    "XCities",
	XCities:    "XCities",
	XCities:    "XCities",
	XCities:    "XCities",
	XCities:    "XCities",
	XCities:    "XCities",
	XCities:    "XCities",
	XCities:    "XCities",
	XCities:    "XCities",
	XCities:    "XCities",
	XCities:    "XCities",
	XDungeons:  "XDungeons",
	XDungeons:  "XDungeons",
	XDungeons:  "XDungeons",
	XDungeons:  "XDungeons",
	XDungeons:  "XDungeons",
	XDungeons:  "XDungeons",
	XDungeons:  "XDungeons",
	XDungeons:  "XDungeons",
	XDungeons:  "XDungeons",
	XDungeons:  "XDungeons",
	XDungeons:  "XDungeons",
	XDungeons:  "XDungeons",
	XDungeons:  "XDungeons",
	XDungeons:  "XDungeons",
	XDungeons:  "XDungeons",
	XDungeons:  "XDungeons",
}

// tileR is where relationships are stored.
type tileR struct {
	ContinentX *Continent
	ContinentX *Continent
	ContinentX *Continent
	ContinentX *Continent
	XCities    CitySlice
	XCities    CitySlice
	XCities    CitySlice
	XCities    CitySlice
	XCities    CitySlice
	XCities    CitySlice
	XCities    CitySlice
	XCities    CitySlice
	XCities    CitySlice
	XCities    CitySlice
	XCities    CitySlice
	XCities    CitySlice
	XCities    CitySlice
	XCities    CitySlice
	XCities    CitySlice
	XCities    CitySlice
	XDungeons  DungeonSlice
	XDungeons  DungeonSlice
	XDungeons  DungeonSlice
	XDungeons  DungeonSlice
	XDungeons  DungeonSlice
	XDungeons  DungeonSlice
	XDungeons  DungeonSlice
	XDungeons  DungeonSlice
	XDungeons  DungeonSlice
	XDungeons  DungeonSlice
	XDungeons  DungeonSlice
	XDungeons  DungeonSlice
	XDungeons  DungeonSlice
	XDungeons  DungeonSlice
	XDungeons  DungeonSlice
	XDungeons  DungeonSlice
}

// NewStruct creates a new relationship struct
func (*tileR) NewStruct() *tileR {
	return &tileR{}
}

// tileL is where Load methods for each relationship are stored.
type tileL struct{}

var (
	tileColumns               = []string{"x", "y", "continent_x", "continent_y", "occupied_by"}
	tileColumnsWithoutDefault = []string{"x", "y", "continent_x", "continent_y"}
	tileColumnsWithDefault    = []string{"occupied_by"}
	tilePrimaryKeyColumns     = []string{"x", "y", "continent_x", "continent_y"}
)

type (
	// TileSlice is an alias for a slice of pointers to Tile.
	// This should generally be used opposed to []Tile.
	TileSlice []*Tile
	// TileHook is the signature for custom Tile hook methods
	TileHook func(context.Context, boil.ContextExecutor, *Tile) error

	tileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tileType                 = reflect.TypeOf(&Tile{})
	tileMapping              = queries.MakeStructMapping(tileType)
	tilePrimaryKeyMapping, _ = queries.BindMapping(tileType, tileMapping, tilePrimaryKeyColumns)
	tileInsertCacheMut       sync.RWMutex
	tileInsertCache          = make(map[string]insertCache)
	tileUpdateCacheMut       sync.RWMutex
	tileUpdateCache          = make(map[string]updateCache)
	tileUpsertCacheMut       sync.RWMutex
	tileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var tileBeforeInsertHooks []TileHook
var tileBeforeUpdateHooks []TileHook
var tileBeforeDeleteHooks []TileHook
var tileBeforeUpsertHooks []TileHook

var tileAfterInsertHooks []TileHook
var tileAfterSelectHooks []TileHook
var tileAfterUpdateHooks []TileHook
var tileAfterDeleteHooks []TileHook
var tileAfterUpsertHooks []TileHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tile) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range tileBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tile) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range tileBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tile) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range tileBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tile) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range tileBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tile) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range tileAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tile) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range tileAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tile) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range tileAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tile) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range tileAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tile) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range tileAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTileHook registers your hook function for all future operations.
func AddTileHook(hookPoint boil.HookPoint, tileHook TileHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tileBeforeInsertHooks = append(tileBeforeInsertHooks, tileHook)
	case boil.BeforeUpdateHook:
		tileBeforeUpdateHooks = append(tileBeforeUpdateHooks, tileHook)
	case boil.BeforeDeleteHook:
		tileBeforeDeleteHooks = append(tileBeforeDeleteHooks, tileHook)
	case boil.BeforeUpsertHook:
		tileBeforeUpsertHooks = append(tileBeforeUpsertHooks, tileHook)
	case boil.AfterInsertHook:
		tileAfterInsertHooks = append(tileAfterInsertHooks, tileHook)
	case boil.AfterSelectHook:
		tileAfterSelectHooks = append(tileAfterSelectHooks, tileHook)
	case boil.AfterUpdateHook:
		tileAfterUpdateHooks = append(tileAfterUpdateHooks, tileHook)
	case boil.AfterDeleteHook:
		tileAfterDeleteHooks = append(tileAfterDeleteHooks, tileHook)
	case boil.AfterUpsertHook:
		tileAfterUpsertHooks = append(tileAfterUpsertHooks, tileHook)
	}
}

// One returns a single tile record from the query.
func (q tileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Tile, error) {
	o := &Tile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tiles")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Tile records from the query.
func (q tileQuery) All(ctx context.Context, exec boil.ContextExecutor) (TileSlice, error) {
	var o []*Tile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Tile slice")
	}

	if len(tileAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Tile records in the query.
func (q tileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tiles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tiles exists")
	}

	return count > 0, nil
}

// ContinentX pointed to by the foreign key.
func (o *Tile) ContinentX(mods ...qm.QueryMod) continentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("x=?", o.ContinentX),
	}

	queryMods = append(queryMods, mods...)

	query := Continents(queryMods...)
	queries.SetFrom(query.Query, "\"continents\"")

	return query
}

// ContinentX pointed to by the foreign key.
func (o *Tile) ContinentX(mods ...qm.QueryMod) continentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("y=?", o.ContinentX),
	}

	queryMods = append(queryMods, mods...)

	query := Continents(queryMods...)
	queries.SetFrom(query.Query, "\"continents\"")

	return query
}

// ContinentX pointed to by the foreign key.
func (o *Tile) ContinentX(mods ...qm.QueryMod) continentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("x=?", o.ContinentY),
	}

	queryMods = append(queryMods, mods...)

	query := Continents(queryMods...)
	queries.SetFrom(query.Query, "\"continents\"")

	return query
}

// ContinentX pointed to by the foreign key.
func (o *Tile) ContinentX(mods ...qm.QueryMod) continentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("y=?", o.ContinentY),
	}

	queryMods = append(queryMods, mods...)

	query := Continents(queryMods...)
	queries.SetFrom(query.Query, "\"continents\"")

	return query
}

// XCities retrieves all the city's Cities with an executor via x column.
func (o *Tile) XCities(mods ...qm.QueryMod) cityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cities\".\"x\"=?", o.X),
	)

	query := Cities(queryMods...)
	queries.SetFrom(query.Query, "\"cities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cities\".*"})
	}

	return query
}

// XCities retrieves all the city's Cities with an executor via x column.
func (o *Tile) XCities(mods ...qm.QueryMod) cityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cities\".\"x\"=?", o.Y),
	)

	query := Cities(queryMods...)
	queries.SetFrom(query.Query, "\"cities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cities\".*"})
	}

	return query
}

// XCities retrieves all the city's Cities with an executor via x column.
func (o *Tile) XCities(mods ...qm.QueryMod) cityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cities\".\"x\"=?", o.ContinentX),
	)

	query := Cities(queryMods...)
	queries.SetFrom(query.Query, "\"cities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cities\".*"})
	}

	return query
}

// XCities retrieves all the city's Cities with an executor via x column.
func (o *Tile) XCities(mods ...qm.QueryMod) cityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cities\".\"x\"=?", o.ContinentY),
	)

	query := Cities(queryMods...)
	queries.SetFrom(query.Query, "\"cities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cities\".*"})
	}

	return query
}

// XCities retrieves all the city's Cities with an executor via y column.
func (o *Tile) XCities(mods ...qm.QueryMod) cityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cities\".\"y\"=?", o.X),
	)

	query := Cities(queryMods...)
	queries.SetFrom(query.Query, "\"cities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cities\".*"})
	}

	return query
}

// XCities retrieves all the city's Cities with an executor via y column.
func (o *Tile) XCities(mods ...qm.QueryMod) cityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cities\".\"y\"=?", o.Y),
	)

	query := Cities(queryMods...)
	queries.SetFrom(query.Query, "\"cities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cities\".*"})
	}

	return query
}

// XCities retrieves all the city's Cities with an executor via y column.
func (o *Tile) XCities(mods ...qm.QueryMod) cityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cities\".\"y\"=?", o.ContinentX),
	)

	query := Cities(queryMods...)
	queries.SetFrom(query.Query, "\"cities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cities\".*"})
	}

	return query
}

// XCities retrieves all the city's Cities with an executor via y column.
func (o *Tile) XCities(mods ...qm.QueryMod) cityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cities\".\"y\"=?", o.ContinentY),
	)

	query := Cities(queryMods...)
	queries.SetFrom(query.Query, "\"cities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cities\".*"})
	}

	return query
}

// XCities retrieves all the city's Cities with an executor via continent_x column.
func (o *Tile) XCities(mods ...qm.QueryMod) cityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cities\".\"continent_x\"=?", o.X),
	)

	query := Cities(queryMods...)
	queries.SetFrom(query.Query, "\"cities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cities\".*"})
	}

	return query
}

// XCities retrieves all the city's Cities with an executor via continent_x column.
func (o *Tile) XCities(mods ...qm.QueryMod) cityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cities\".\"continent_x\"=?", o.Y),
	)

	query := Cities(queryMods...)
	queries.SetFrom(query.Query, "\"cities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cities\".*"})
	}

	return query
}

// XCities retrieves all the city's Cities with an executor via continent_x column.
func (o *Tile) XCities(mods ...qm.QueryMod) cityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cities\".\"continent_x\"=?", o.ContinentX),
	)

	query := Cities(queryMods...)
	queries.SetFrom(query.Query, "\"cities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cities\".*"})
	}

	return query
}

// XCities retrieves all the city's Cities with an executor via continent_x column.
func (o *Tile) XCities(mods ...qm.QueryMod) cityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cities\".\"continent_x\"=?", o.ContinentY),
	)

	query := Cities(queryMods...)
	queries.SetFrom(query.Query, "\"cities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cities\".*"})
	}

	return query
}

// XCities retrieves all the city's Cities with an executor via continent_y column.
func (o *Tile) XCities(mods ...qm.QueryMod) cityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cities\".\"continent_y\"=?", o.X),
	)

	query := Cities(queryMods...)
	queries.SetFrom(query.Query, "\"cities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cities\".*"})
	}

	return query
}

// XCities retrieves all the city's Cities with an executor via continent_y column.
func (o *Tile) XCities(mods ...qm.QueryMod) cityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cities\".\"continent_y\"=?", o.Y),
	)

	query := Cities(queryMods...)
	queries.SetFrom(query.Query, "\"cities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cities\".*"})
	}

	return query
}

// XCities retrieves all the city's Cities with an executor via continent_y column.
func (o *Tile) XCities(mods ...qm.QueryMod) cityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cities\".\"continent_y\"=?", o.ContinentX),
	)

	query := Cities(queryMods...)
	queries.SetFrom(query.Query, "\"cities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cities\".*"})
	}

	return query
}

// XCities retrieves all the city's Cities with an executor via continent_y column.
func (o *Tile) XCities(mods ...qm.QueryMod) cityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cities\".\"continent_y\"=?", o.ContinentY),
	)

	query := Cities(queryMods...)
	queries.SetFrom(query.Query, "\"cities\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cities\".*"})
	}

	return query
}

// XDungeons retrieves all the dungeon's Dungeons with an executor via x column.
func (o *Tile) XDungeons(mods ...qm.QueryMod) dungeonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dungeons\".\"x\"=?", o.X),
	)

	query := Dungeons(queryMods...)
	queries.SetFrom(query.Query, "\"dungeons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dungeons\".*"})
	}

	return query
}

// XDungeons retrieves all the dungeon's Dungeons with an executor via x column.
func (o *Tile) XDungeons(mods ...qm.QueryMod) dungeonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dungeons\".\"x\"=?", o.Y),
	)

	query := Dungeons(queryMods...)
	queries.SetFrom(query.Query, "\"dungeons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dungeons\".*"})
	}

	return query
}

// XDungeons retrieves all the dungeon's Dungeons with an executor via x column.
func (o *Tile) XDungeons(mods ...qm.QueryMod) dungeonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dungeons\".\"x\"=?", o.ContinentX),
	)

	query := Dungeons(queryMods...)
	queries.SetFrom(query.Query, "\"dungeons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dungeons\".*"})
	}

	return query
}

// XDungeons retrieves all the dungeon's Dungeons with an executor via x column.
func (o *Tile) XDungeons(mods ...qm.QueryMod) dungeonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dungeons\".\"x\"=?", o.ContinentY),
	)

	query := Dungeons(queryMods...)
	queries.SetFrom(query.Query, "\"dungeons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dungeons\".*"})
	}

	return query
}

// XDungeons retrieves all the dungeon's Dungeons with an executor via y column.
func (o *Tile) XDungeons(mods ...qm.QueryMod) dungeonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dungeons\".\"y\"=?", o.X),
	)

	query := Dungeons(queryMods...)
	queries.SetFrom(query.Query, "\"dungeons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dungeons\".*"})
	}

	return query
}

// XDungeons retrieves all the dungeon's Dungeons with an executor via y column.
func (o *Tile) XDungeons(mods ...qm.QueryMod) dungeonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dungeons\".\"y\"=?", o.Y),
	)

	query := Dungeons(queryMods...)
	queries.SetFrom(query.Query, "\"dungeons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dungeons\".*"})
	}

	return query
}

// XDungeons retrieves all the dungeon's Dungeons with an executor via y column.
func (o *Tile) XDungeons(mods ...qm.QueryMod) dungeonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dungeons\".\"y\"=?", o.ContinentX),
	)

	query := Dungeons(queryMods...)
	queries.SetFrom(query.Query, "\"dungeons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dungeons\".*"})
	}

	return query
}

// XDungeons retrieves all the dungeon's Dungeons with an executor via y column.
func (o *Tile) XDungeons(mods ...qm.QueryMod) dungeonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dungeons\".\"y\"=?", o.ContinentY),
	)

	query := Dungeons(queryMods...)
	queries.SetFrom(query.Query, "\"dungeons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dungeons\".*"})
	}

	return query
}

// XDungeons retrieves all the dungeon's Dungeons with an executor via continent_x column.
func (o *Tile) XDungeons(mods ...qm.QueryMod) dungeonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dungeons\".\"continent_x\"=?", o.X),
	)

	query := Dungeons(queryMods...)
	queries.SetFrom(query.Query, "\"dungeons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dungeons\".*"})
	}

	return query
}

// XDungeons retrieves all the dungeon's Dungeons with an executor via continent_x column.
func (o *Tile) XDungeons(mods ...qm.QueryMod) dungeonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dungeons\".\"continent_x\"=?", o.Y),
	)

	query := Dungeons(queryMods...)
	queries.SetFrom(query.Query, "\"dungeons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dungeons\".*"})
	}

	return query
}

// XDungeons retrieves all the dungeon's Dungeons with an executor via continent_x column.
func (o *Tile) XDungeons(mods ...qm.QueryMod) dungeonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dungeons\".\"continent_x\"=?", o.ContinentX),
	)

	query := Dungeons(queryMods...)
	queries.SetFrom(query.Query, "\"dungeons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dungeons\".*"})
	}

	return query
}

// XDungeons retrieves all the dungeon's Dungeons with an executor via continent_x column.
func (o *Tile) XDungeons(mods ...qm.QueryMod) dungeonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dungeons\".\"continent_x\"=?", o.ContinentY),
	)

	query := Dungeons(queryMods...)
	queries.SetFrom(query.Query, "\"dungeons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dungeons\".*"})
	}

	return query
}

// XDungeons retrieves all the dungeon's Dungeons with an executor via continent_y column.
func (o *Tile) XDungeons(mods ...qm.QueryMod) dungeonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dungeons\".\"continent_y\"=?", o.X),
	)

	query := Dungeons(queryMods...)
	queries.SetFrom(query.Query, "\"dungeons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dungeons\".*"})
	}

	return query
}

// XDungeons retrieves all the dungeon's Dungeons with an executor via continent_y column.
func (o *Tile) XDungeons(mods ...qm.QueryMod) dungeonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dungeons\".\"continent_y\"=?", o.Y),
	)

	query := Dungeons(queryMods...)
	queries.SetFrom(query.Query, "\"dungeons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dungeons\".*"})
	}

	return query
}

// XDungeons retrieves all the dungeon's Dungeons with an executor via continent_y column.
func (o *Tile) XDungeons(mods ...qm.QueryMod) dungeonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dungeons\".\"continent_y\"=?", o.ContinentX),
	)

	query := Dungeons(queryMods...)
	queries.SetFrom(query.Query, "\"dungeons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dungeons\".*"})
	}

	return query
}

// XDungeons retrieves all the dungeon's Dungeons with an executor via continent_y column.
func (o *Tile) XDungeons(mods ...qm.QueryMod) dungeonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"dungeons\".\"continent_y\"=?", o.ContinentY),
	)

	query := Dungeons(queryMods...)
	queries.SetFrom(query.Query, "\"dungeons\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"dungeons\".*"})
	}

	return query
}

// LoadContinentX allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tileL) LoadContinentX(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentX)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentX {
					continue Outer
				}
			}

			args = append(args, obj.ContinentX)
		}
	}

	query := NewQuery(qm.From(`continents`), qm.WhereIn(`x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Continent")
	}

	var resultSlice []*Continent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Continent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for continents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for continents")
	}

	if len(tileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContinentX = foreign
		if foreign.R == nil {
			foreign.R = &continentR{}
		}
		foreign.R.ContinentXTiles = append(foreign.R.ContinentXTiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContinentX == foreign.X {
				local.R.ContinentX = foreign
				if foreign.R == nil {
					foreign.R = &continentR{}
				}
				foreign.R.ContinentXTiles = append(foreign.R.ContinentXTiles, local)
				break
			}
		}
	}

	return nil
}

// LoadContinentX allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tileL) LoadContinentX(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentX)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentX {
					continue Outer
				}
			}

			args = append(args, obj.ContinentX)
		}
	}

	query := NewQuery(qm.From(`continents`), qm.WhereIn(`y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Continent")
	}

	var resultSlice []*Continent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Continent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for continents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for continents")
	}

	if len(tileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContinentX = foreign
		if foreign.R == nil {
			foreign.R = &continentR{}
		}
		foreign.R.ContinentXTiles = append(foreign.R.ContinentXTiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContinentX == foreign.Y {
				local.R.ContinentX = foreign
				if foreign.R == nil {
					foreign.R = &continentR{}
				}
				foreign.R.ContinentXTiles = append(foreign.R.ContinentXTiles, local)
				break
			}
		}
	}

	return nil
}

// LoadContinentX allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tileL) LoadContinentX(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentY)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentY {
					continue Outer
				}
			}

			args = append(args, obj.ContinentY)
		}
	}

	query := NewQuery(qm.From(`continents`), qm.WhereIn(`x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Continent")
	}

	var resultSlice []*Continent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Continent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for continents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for continents")
	}

	if len(tileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContinentX = foreign
		if foreign.R == nil {
			foreign.R = &continentR{}
		}
		foreign.R.ContinentXTiles = append(foreign.R.ContinentXTiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContinentY == foreign.X {
				local.R.ContinentX = foreign
				if foreign.R == nil {
					foreign.R = &continentR{}
				}
				foreign.R.ContinentXTiles = append(foreign.R.ContinentXTiles, local)
				break
			}
		}
	}

	return nil
}

// LoadContinentX allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tileL) LoadContinentX(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentY)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentY {
					continue Outer
				}
			}

			args = append(args, obj.ContinentY)
		}
	}

	query := NewQuery(qm.From(`continents`), qm.WhereIn(`y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Continent")
	}

	var resultSlice []*Continent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Continent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for continents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for continents")
	}

	if len(tileAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContinentX = foreign
		if foreign.R == nil {
			foreign.R = &continentR{}
		}
		foreign.R.ContinentXTiles = append(foreign.R.ContinentXTiles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContinentY == foreign.Y {
				local.R.ContinentX = foreign
				if foreign.R == nil {
					foreign.R = &continentR{}
				}
				foreign.R.ContinentXTiles = append(foreign.R.ContinentXTiles, local)
				break
			}
		}
	}

	return nil
}

// LoadXCities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXCities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.X)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.X {
					continue Outer
				}
			}

			args = append(args, obj.X)
		}
	}

	query := NewQuery(qm.From(`cities`), qm.WhereIn(`x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cities")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cities")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XCities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cityR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.X == foreign.X {
				local.R.XCities = append(local.R.XCities, foreign)
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXCities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXCities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.Y)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.Y {
					continue Outer
				}
			}

			args = append(args, obj.Y)
		}
	}

	query := NewQuery(qm.From(`cities`), qm.WhereIn(`x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cities")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cities")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XCities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cityR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Y == foreign.X {
				local.R.XCities = append(local.R.XCities, foreign)
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXCities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXCities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentX)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentX {
					continue Outer
				}
			}

			args = append(args, obj.ContinentX)
		}
	}

	query := NewQuery(qm.From(`cities`), qm.WhereIn(`x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cities")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cities")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XCities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cityR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContinentX == foreign.X {
				local.R.XCities = append(local.R.XCities, foreign)
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXCities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXCities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentY)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentY {
					continue Outer
				}
			}

			args = append(args, obj.ContinentY)
		}
	}

	query := NewQuery(qm.From(`cities`), qm.WhereIn(`x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cities")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cities")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XCities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cityR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContinentY == foreign.X {
				local.R.XCities = append(local.R.XCities, foreign)
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXCities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXCities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.X)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.X {
					continue Outer
				}
			}

			args = append(args, obj.X)
		}
	}

	query := NewQuery(qm.From(`cities`), qm.WhereIn(`y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cities")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cities")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XCities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cityR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.X == foreign.Y {
				local.R.XCities = append(local.R.XCities, foreign)
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXCities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXCities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.Y)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.Y {
					continue Outer
				}
			}

			args = append(args, obj.Y)
		}
	}

	query := NewQuery(qm.From(`cities`), qm.WhereIn(`y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cities")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cities")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XCities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cityR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Y == foreign.Y {
				local.R.XCities = append(local.R.XCities, foreign)
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXCities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXCities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentX)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentX {
					continue Outer
				}
			}

			args = append(args, obj.ContinentX)
		}
	}

	query := NewQuery(qm.From(`cities`), qm.WhereIn(`y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cities")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cities")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XCities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cityR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContinentX == foreign.Y {
				local.R.XCities = append(local.R.XCities, foreign)
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXCities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXCities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentY)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentY {
					continue Outer
				}
			}

			args = append(args, obj.ContinentY)
		}
	}

	query := NewQuery(qm.From(`cities`), qm.WhereIn(`y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cities")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cities")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XCities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cityR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContinentY == foreign.Y {
				local.R.XCities = append(local.R.XCities, foreign)
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXCities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXCities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.X)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.X {
					continue Outer
				}
			}

			args = append(args, obj.X)
		}
	}

	query := NewQuery(qm.From(`cities`), qm.WhereIn(`continent_x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cities")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cities")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XCities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cityR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.X == foreign.ContinentX {
				local.R.XCities = append(local.R.XCities, foreign)
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXCities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXCities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.Y)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.Y {
					continue Outer
				}
			}

			args = append(args, obj.Y)
		}
	}

	query := NewQuery(qm.From(`cities`), qm.WhereIn(`continent_x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cities")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cities")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XCities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cityR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Y == foreign.ContinentX {
				local.R.XCities = append(local.R.XCities, foreign)
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXCities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXCities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentX)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentX {
					continue Outer
				}
			}

			args = append(args, obj.ContinentX)
		}
	}

	query := NewQuery(qm.From(`cities`), qm.WhereIn(`continent_x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cities")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cities")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XCities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cityR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContinentX == foreign.ContinentX {
				local.R.XCities = append(local.R.XCities, foreign)
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXCities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXCities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentY)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentY {
					continue Outer
				}
			}

			args = append(args, obj.ContinentY)
		}
	}

	query := NewQuery(qm.From(`cities`), qm.WhereIn(`continent_x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cities")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cities")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XCities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cityR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContinentY == foreign.ContinentX {
				local.R.XCities = append(local.R.XCities, foreign)
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXCities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXCities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.X)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.X {
					continue Outer
				}
			}

			args = append(args, obj.X)
		}
	}

	query := NewQuery(qm.From(`cities`), qm.WhereIn(`continent_y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cities")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cities")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XCities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cityR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.X == foreign.ContinentY {
				local.R.XCities = append(local.R.XCities, foreign)
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXCities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXCities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.Y)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.Y {
					continue Outer
				}
			}

			args = append(args, obj.Y)
		}
	}

	query := NewQuery(qm.From(`cities`), qm.WhereIn(`continent_y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cities")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cities")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XCities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cityR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Y == foreign.ContinentY {
				local.R.XCities = append(local.R.XCities, foreign)
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXCities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXCities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentX)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentX {
					continue Outer
				}
			}

			args = append(args, obj.ContinentX)
		}
	}

	query := NewQuery(qm.From(`cities`), qm.WhereIn(`continent_y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cities")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cities")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XCities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cityR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContinentX == foreign.ContinentY {
				local.R.XCities = append(local.R.XCities, foreign)
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXCities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXCities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentY)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentY {
					continue Outer
				}
			}

			args = append(args, obj.ContinentY)
		}
	}

	query := NewQuery(qm.From(`cities`), qm.WhereIn(`continent_y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cities")
	}

	var resultSlice []*City
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cities")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cities")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cities")
	}

	if len(cityAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XCities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cityR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContinentY == foreign.ContinentY {
				local.R.XCities = append(local.R.XCities, foreign)
				if foreign.R == nil {
					foreign.R = &cityR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXDungeons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXDungeons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.X)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.X {
					continue Outer
				}
			}

			args = append(args, obj.X)
		}
	}

	query := NewQuery(qm.From(`dungeons`), qm.WhereIn(`x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dungeons")
	}

	var resultSlice []*Dungeon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dungeons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dungeons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dungeons")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XDungeons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dungeonR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.X == foreign.X {
				local.R.XDungeons = append(local.R.XDungeons, foreign)
				if foreign.R == nil {
					foreign.R = &dungeonR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXDungeons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXDungeons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.Y)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.Y {
					continue Outer
				}
			}

			args = append(args, obj.Y)
		}
	}

	query := NewQuery(qm.From(`dungeons`), qm.WhereIn(`x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dungeons")
	}

	var resultSlice []*Dungeon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dungeons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dungeons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dungeons")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XDungeons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dungeonR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Y == foreign.X {
				local.R.XDungeons = append(local.R.XDungeons, foreign)
				if foreign.R == nil {
					foreign.R = &dungeonR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXDungeons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXDungeons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentX)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentX {
					continue Outer
				}
			}

			args = append(args, obj.ContinentX)
		}
	}

	query := NewQuery(qm.From(`dungeons`), qm.WhereIn(`x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dungeons")
	}

	var resultSlice []*Dungeon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dungeons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dungeons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dungeons")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XDungeons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dungeonR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContinentX == foreign.X {
				local.R.XDungeons = append(local.R.XDungeons, foreign)
				if foreign.R == nil {
					foreign.R = &dungeonR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXDungeons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXDungeons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentY)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentY {
					continue Outer
				}
			}

			args = append(args, obj.ContinentY)
		}
	}

	query := NewQuery(qm.From(`dungeons`), qm.WhereIn(`x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dungeons")
	}

	var resultSlice []*Dungeon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dungeons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dungeons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dungeons")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XDungeons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dungeonR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContinentY == foreign.X {
				local.R.XDungeons = append(local.R.XDungeons, foreign)
				if foreign.R == nil {
					foreign.R = &dungeonR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXDungeons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXDungeons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.X)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.X {
					continue Outer
				}
			}

			args = append(args, obj.X)
		}
	}

	query := NewQuery(qm.From(`dungeons`), qm.WhereIn(`y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dungeons")
	}

	var resultSlice []*Dungeon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dungeons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dungeons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dungeons")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XDungeons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dungeonR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.X == foreign.Y {
				local.R.XDungeons = append(local.R.XDungeons, foreign)
				if foreign.R == nil {
					foreign.R = &dungeonR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXDungeons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXDungeons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.Y)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.Y {
					continue Outer
				}
			}

			args = append(args, obj.Y)
		}
	}

	query := NewQuery(qm.From(`dungeons`), qm.WhereIn(`y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dungeons")
	}

	var resultSlice []*Dungeon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dungeons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dungeons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dungeons")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XDungeons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dungeonR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Y == foreign.Y {
				local.R.XDungeons = append(local.R.XDungeons, foreign)
				if foreign.R == nil {
					foreign.R = &dungeonR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXDungeons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXDungeons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentX)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentX {
					continue Outer
				}
			}

			args = append(args, obj.ContinentX)
		}
	}

	query := NewQuery(qm.From(`dungeons`), qm.WhereIn(`y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dungeons")
	}

	var resultSlice []*Dungeon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dungeons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dungeons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dungeons")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XDungeons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dungeonR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContinentX == foreign.Y {
				local.R.XDungeons = append(local.R.XDungeons, foreign)
				if foreign.R == nil {
					foreign.R = &dungeonR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXDungeons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXDungeons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentY)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentY {
					continue Outer
				}
			}

			args = append(args, obj.ContinentY)
		}
	}

	query := NewQuery(qm.From(`dungeons`), qm.WhereIn(`y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dungeons")
	}

	var resultSlice []*Dungeon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dungeons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dungeons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dungeons")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XDungeons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dungeonR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContinentY == foreign.Y {
				local.R.XDungeons = append(local.R.XDungeons, foreign)
				if foreign.R == nil {
					foreign.R = &dungeonR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXDungeons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXDungeons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.X)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.X {
					continue Outer
				}
			}

			args = append(args, obj.X)
		}
	}

	query := NewQuery(qm.From(`dungeons`), qm.WhereIn(`continent_x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dungeons")
	}

	var resultSlice []*Dungeon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dungeons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dungeons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dungeons")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XDungeons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dungeonR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.X == foreign.ContinentX {
				local.R.XDungeons = append(local.R.XDungeons, foreign)
				if foreign.R == nil {
					foreign.R = &dungeonR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXDungeons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXDungeons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.Y)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.Y {
					continue Outer
				}
			}

			args = append(args, obj.Y)
		}
	}

	query := NewQuery(qm.From(`dungeons`), qm.WhereIn(`continent_x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dungeons")
	}

	var resultSlice []*Dungeon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dungeons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dungeons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dungeons")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XDungeons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dungeonR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Y == foreign.ContinentX {
				local.R.XDungeons = append(local.R.XDungeons, foreign)
				if foreign.R == nil {
					foreign.R = &dungeonR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXDungeons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXDungeons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentX)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentX {
					continue Outer
				}
			}

			args = append(args, obj.ContinentX)
		}
	}

	query := NewQuery(qm.From(`dungeons`), qm.WhereIn(`continent_x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dungeons")
	}

	var resultSlice []*Dungeon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dungeons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dungeons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dungeons")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XDungeons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dungeonR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContinentX == foreign.ContinentX {
				local.R.XDungeons = append(local.R.XDungeons, foreign)
				if foreign.R == nil {
					foreign.R = &dungeonR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXDungeons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXDungeons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentY)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentY {
					continue Outer
				}
			}

			args = append(args, obj.ContinentY)
		}
	}

	query := NewQuery(qm.From(`dungeons`), qm.WhereIn(`continent_x in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dungeons")
	}

	var resultSlice []*Dungeon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dungeons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dungeons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dungeons")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XDungeons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dungeonR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContinentY == foreign.ContinentX {
				local.R.XDungeons = append(local.R.XDungeons, foreign)
				if foreign.R == nil {
					foreign.R = &dungeonR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXDungeons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXDungeons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.X)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.X {
					continue Outer
				}
			}

			args = append(args, obj.X)
		}
	}

	query := NewQuery(qm.From(`dungeons`), qm.WhereIn(`continent_y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dungeons")
	}

	var resultSlice []*Dungeon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dungeons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dungeons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dungeons")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XDungeons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dungeonR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.X == foreign.ContinentY {
				local.R.XDungeons = append(local.R.XDungeons, foreign)
				if foreign.R == nil {
					foreign.R = &dungeonR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXDungeons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXDungeons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.Y)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.Y {
					continue Outer
				}
			}

			args = append(args, obj.Y)
		}
	}

	query := NewQuery(qm.From(`dungeons`), qm.WhereIn(`continent_y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dungeons")
	}

	var resultSlice []*Dungeon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dungeons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dungeons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dungeons")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XDungeons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dungeonR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Y == foreign.ContinentY {
				local.R.XDungeons = append(local.R.XDungeons, foreign)
				if foreign.R == nil {
					foreign.R = &dungeonR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXDungeons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXDungeons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentX)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentX {
					continue Outer
				}
			}

			args = append(args, obj.ContinentX)
		}
	}

	query := NewQuery(qm.From(`dungeons`), qm.WhereIn(`continent_y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dungeons")
	}

	var resultSlice []*Dungeon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dungeons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dungeons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dungeons")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XDungeons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dungeonR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContinentX == foreign.ContinentY {
				local.R.XDungeons = append(local.R.XDungeons, foreign)
				if foreign.R == nil {
					foreign.R = &dungeonR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// LoadXDungeons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tileL) LoadXDungeons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTile interface{}, mods queries.Applicator) error {
	var slice []*Tile
	var object *Tile

	if singular {
		object = maybeTile.(*Tile)
	} else {
		slice = *maybeTile.(*[]*Tile)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tileR{}
		}
		args = append(args, object.ContinentY)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tileR{}
			}

			for _, a := range args {
				if a == obj.ContinentY {
					continue Outer
				}
			}

			args = append(args, obj.ContinentY)
		}
	}

	query := NewQuery(qm.From(`dungeons`), qm.WhereIn(`continent_y in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dungeons")
	}

	var resultSlice []*Dungeon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dungeons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dungeons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dungeons")
	}

	if len(dungeonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.XDungeons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &dungeonR{}
			}
			foreign.R.X = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ContinentY == foreign.ContinentY {
				local.R.XDungeons = append(local.R.XDungeons, foreign)
				if foreign.R == nil {
					foreign.R = &dungeonR{}
				}
				foreign.R.X = local
				break
			}
		}
	}

	return nil
}

// SetContinentX of the tile to the related item.
// Sets o.R.ContinentX to related.
// Adds o to related.R.ContinentXTiles.
func (o *Tile) SetContinentX(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Continent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tiles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"continent_x"}),
		strmangle.WhereClause("\"", "\"", 2, tilePrimaryKeyColumns),
	)
	values := []interface{}{related.X, o.X, o.Y, o.ContinentX, o.ContinentY}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContinentX = related.X
	if o.R == nil {
		o.R = &tileR{
			ContinentX: related,
		}
	} else {
		o.R.ContinentX = related
	}

	if related.R == nil {
		related.R = &continentR{
			ContinentXTiles: TileSlice{o},
		}
	} else {
		related.R.ContinentXTiles = append(related.R.ContinentXTiles, o)
	}

	return nil
}

// SetContinentX of the tile to the related item.
// Sets o.R.ContinentX to related.
// Adds o to related.R.ContinentXTiles.
func (o *Tile) SetContinentX(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Continent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tiles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"continent_x"}),
		strmangle.WhereClause("\"", "\"", 2, tilePrimaryKeyColumns),
	)
	values := []interface{}{related.Y, o.X, o.Y, o.ContinentX, o.ContinentY}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContinentX = related.Y
	if o.R == nil {
		o.R = &tileR{
			ContinentX: related,
		}
	} else {
		o.R.ContinentX = related
	}

	if related.R == nil {
		related.R = &continentR{
			ContinentXTiles: TileSlice{o},
		}
	} else {
		related.R.ContinentXTiles = append(related.R.ContinentXTiles, o)
	}

	return nil
}

// SetContinentX of the tile to the related item.
// Sets o.R.ContinentX to related.
// Adds o to related.R.ContinentXTiles.
func (o *Tile) SetContinentX(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Continent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tiles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"continent_y"}),
		strmangle.WhereClause("\"", "\"", 2, tilePrimaryKeyColumns),
	)
	values := []interface{}{related.X, o.X, o.Y, o.ContinentX, o.ContinentY}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContinentY = related.X
	if o.R == nil {
		o.R = &tileR{
			ContinentX: related,
		}
	} else {
		o.R.ContinentX = related
	}

	if related.R == nil {
		related.R = &continentR{
			ContinentXTiles: TileSlice{o},
		}
	} else {
		related.R.ContinentXTiles = append(related.R.ContinentXTiles, o)
	}

	return nil
}

// SetContinentX of the tile to the related item.
// Sets o.R.ContinentX to related.
// Adds o to related.R.ContinentXTiles.
func (o *Tile) SetContinentX(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Continent) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tiles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"continent_y"}),
		strmangle.WhereClause("\"", "\"", 2, tilePrimaryKeyColumns),
	)
	values := []interface{}{related.Y, o.X, o.Y, o.ContinentX, o.ContinentY}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContinentY = related.Y
	if o.R == nil {
		o.R = &tileR{
			ContinentX: related,
		}
	} else {
		o.R.ContinentX = related
	}

	if related.R == nil {
		related.R = &continentR{
			ContinentXTiles: TileSlice{o},
		}
	} else {
		related.R.ContinentXTiles = append(related.R.ContinentXTiles, o)
	}

	return nil
}

// AddXCities adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XCities.
// Sets related.R.X appropriately.
func (o *Tile) AddXCities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*City) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.X = o.X
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"x"}),
				strmangle.WhereClause("\"", "\"", 2, cityPrimaryKeyColumns),
			)
			values := []interface{}{o.X, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.X = o.X
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XCities: related,
		}
	} else {
		o.R.XCities = append(o.R.XCities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cityR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXCities adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XCities.
// Sets related.R.X appropriately.
func (o *Tile) AddXCities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*City) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.X = o.Y
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"x"}),
				strmangle.WhereClause("\"", "\"", 2, cityPrimaryKeyColumns),
			)
			values := []interface{}{o.Y, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.X = o.Y
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XCities: related,
		}
	} else {
		o.R.XCities = append(o.R.XCities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cityR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXCities adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XCities.
// Sets related.R.X appropriately.
func (o *Tile) AddXCities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*City) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.X = o.ContinentX
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"x"}),
				strmangle.WhereClause("\"", "\"", 2, cityPrimaryKeyColumns),
			)
			values := []interface{}{o.ContinentX, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.X = o.ContinentX
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XCities: related,
		}
	} else {
		o.R.XCities = append(o.R.XCities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cityR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXCities adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XCities.
// Sets related.R.X appropriately.
func (o *Tile) AddXCities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*City) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.X = o.ContinentY
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"x"}),
				strmangle.WhereClause("\"", "\"", 2, cityPrimaryKeyColumns),
			)
			values := []interface{}{o.ContinentY, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.X = o.ContinentY
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XCities: related,
		}
	} else {
		o.R.XCities = append(o.R.XCities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cityR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXCities adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XCities.
// Sets related.R.X appropriately.
func (o *Tile) AddXCities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*City) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Y = o.X
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"y"}),
				strmangle.WhereClause("\"", "\"", 2, cityPrimaryKeyColumns),
			)
			values := []interface{}{o.X, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Y = o.X
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XCities: related,
		}
	} else {
		o.R.XCities = append(o.R.XCities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cityR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXCities adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XCities.
// Sets related.R.X appropriately.
func (o *Tile) AddXCities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*City) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Y = o.Y
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"y"}),
				strmangle.WhereClause("\"", "\"", 2, cityPrimaryKeyColumns),
			)
			values := []interface{}{o.Y, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Y = o.Y
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XCities: related,
		}
	} else {
		o.R.XCities = append(o.R.XCities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cityR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXCities adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XCities.
// Sets related.R.X appropriately.
func (o *Tile) AddXCities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*City) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Y = o.ContinentX
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"y"}),
				strmangle.WhereClause("\"", "\"", 2, cityPrimaryKeyColumns),
			)
			values := []interface{}{o.ContinentX, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Y = o.ContinentX
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XCities: related,
		}
	} else {
		o.R.XCities = append(o.R.XCities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cityR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXCities adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XCities.
// Sets related.R.X appropriately.
func (o *Tile) AddXCities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*City) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Y = o.ContinentY
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"y"}),
				strmangle.WhereClause("\"", "\"", 2, cityPrimaryKeyColumns),
			)
			values := []interface{}{o.ContinentY, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Y = o.ContinentY
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XCities: related,
		}
	} else {
		o.R.XCities = append(o.R.XCities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cityR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXCities adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XCities.
// Sets related.R.X appropriately.
func (o *Tile) AddXCities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*City) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentX = o.X
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_x"}),
				strmangle.WhereClause("\"", "\"", 2, cityPrimaryKeyColumns),
			)
			values := []interface{}{o.X, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentX = o.X
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XCities: related,
		}
	} else {
		o.R.XCities = append(o.R.XCities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cityR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXCities adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XCities.
// Sets related.R.X appropriately.
func (o *Tile) AddXCities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*City) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentX = o.Y
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_x"}),
				strmangle.WhereClause("\"", "\"", 2, cityPrimaryKeyColumns),
			)
			values := []interface{}{o.Y, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentX = o.Y
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XCities: related,
		}
	} else {
		o.R.XCities = append(o.R.XCities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cityR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXCities adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XCities.
// Sets related.R.X appropriately.
func (o *Tile) AddXCities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*City) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentX = o.ContinentX
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_x"}),
				strmangle.WhereClause("\"", "\"", 2, cityPrimaryKeyColumns),
			)
			values := []interface{}{o.ContinentX, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentX = o.ContinentX
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XCities: related,
		}
	} else {
		o.R.XCities = append(o.R.XCities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cityR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXCities adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XCities.
// Sets related.R.X appropriately.
func (o *Tile) AddXCities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*City) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentX = o.ContinentY
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_x"}),
				strmangle.WhereClause("\"", "\"", 2, cityPrimaryKeyColumns),
			)
			values := []interface{}{o.ContinentY, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentX = o.ContinentY
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XCities: related,
		}
	} else {
		o.R.XCities = append(o.R.XCities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cityR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXCities adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XCities.
// Sets related.R.X appropriately.
func (o *Tile) AddXCities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*City) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentY = o.X
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_y"}),
				strmangle.WhereClause("\"", "\"", 2, cityPrimaryKeyColumns),
			)
			values := []interface{}{o.X, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentY = o.X
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XCities: related,
		}
	} else {
		o.R.XCities = append(o.R.XCities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cityR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXCities adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XCities.
// Sets related.R.X appropriately.
func (o *Tile) AddXCities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*City) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentY = o.Y
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_y"}),
				strmangle.WhereClause("\"", "\"", 2, cityPrimaryKeyColumns),
			)
			values := []interface{}{o.Y, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentY = o.Y
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XCities: related,
		}
	} else {
		o.R.XCities = append(o.R.XCities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cityR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXCities adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XCities.
// Sets related.R.X appropriately.
func (o *Tile) AddXCities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*City) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentY = o.ContinentX
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_y"}),
				strmangle.WhereClause("\"", "\"", 2, cityPrimaryKeyColumns),
			)
			values := []interface{}{o.ContinentX, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentY = o.ContinentX
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XCities: related,
		}
	} else {
		o.R.XCities = append(o.R.XCities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cityR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXCities adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XCities.
// Sets related.R.X appropriately.
func (o *Tile) AddXCities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*City) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentY = o.ContinentY
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cities\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_y"}),
				strmangle.WhereClause("\"", "\"", 2, cityPrimaryKeyColumns),
			)
			values := []interface{}{o.ContinentY, rel.X, rel.Y, rel.ContinentX, rel.ContinentY}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentY = o.ContinentY
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XCities: related,
		}
	} else {
		o.R.XCities = append(o.R.XCities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cityR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXDungeons adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XDungeons.
// Sets related.R.X appropriately.
func (o *Tile) AddXDungeons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dungeon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.X = o.X
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dungeons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"x"}),
				strmangle.WhereClause("\"", "\"", 2, dungeonPrimaryKeyColumns),
			)
			values := []interface{}{o.X, rel.ContinentX, rel.ContinentY, rel.X, rel.Y}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.X = o.X
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XDungeons: related,
		}
	} else {
		o.R.XDungeons = append(o.R.XDungeons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dungeonR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXDungeons adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XDungeons.
// Sets related.R.X appropriately.
func (o *Tile) AddXDungeons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dungeon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.X = o.Y
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dungeons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"x"}),
				strmangle.WhereClause("\"", "\"", 2, dungeonPrimaryKeyColumns),
			)
			values := []interface{}{o.Y, rel.ContinentX, rel.ContinentY, rel.X, rel.Y}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.X = o.Y
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XDungeons: related,
		}
	} else {
		o.R.XDungeons = append(o.R.XDungeons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dungeonR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXDungeons adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XDungeons.
// Sets related.R.X appropriately.
func (o *Tile) AddXDungeons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dungeon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.X = o.ContinentX
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dungeons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"x"}),
				strmangle.WhereClause("\"", "\"", 2, dungeonPrimaryKeyColumns),
			)
			values := []interface{}{o.ContinentX, rel.ContinentX, rel.ContinentY, rel.X, rel.Y}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.X = o.ContinentX
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XDungeons: related,
		}
	} else {
		o.R.XDungeons = append(o.R.XDungeons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dungeonR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXDungeons adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XDungeons.
// Sets related.R.X appropriately.
func (o *Tile) AddXDungeons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dungeon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.X = o.ContinentY
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dungeons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"x"}),
				strmangle.WhereClause("\"", "\"", 2, dungeonPrimaryKeyColumns),
			)
			values := []interface{}{o.ContinentY, rel.ContinentX, rel.ContinentY, rel.X, rel.Y}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.X = o.ContinentY
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XDungeons: related,
		}
	} else {
		o.R.XDungeons = append(o.R.XDungeons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dungeonR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXDungeons adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XDungeons.
// Sets related.R.X appropriately.
func (o *Tile) AddXDungeons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dungeon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Y = o.X
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dungeons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"y"}),
				strmangle.WhereClause("\"", "\"", 2, dungeonPrimaryKeyColumns),
			)
			values := []interface{}{o.X, rel.ContinentX, rel.ContinentY, rel.X, rel.Y}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Y = o.X
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XDungeons: related,
		}
	} else {
		o.R.XDungeons = append(o.R.XDungeons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dungeonR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXDungeons adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XDungeons.
// Sets related.R.X appropriately.
func (o *Tile) AddXDungeons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dungeon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Y = o.Y
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dungeons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"y"}),
				strmangle.WhereClause("\"", "\"", 2, dungeonPrimaryKeyColumns),
			)
			values := []interface{}{o.Y, rel.ContinentX, rel.ContinentY, rel.X, rel.Y}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Y = o.Y
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XDungeons: related,
		}
	} else {
		o.R.XDungeons = append(o.R.XDungeons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dungeonR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXDungeons adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XDungeons.
// Sets related.R.X appropriately.
func (o *Tile) AddXDungeons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dungeon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Y = o.ContinentX
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dungeons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"y"}),
				strmangle.WhereClause("\"", "\"", 2, dungeonPrimaryKeyColumns),
			)
			values := []interface{}{o.ContinentX, rel.ContinentX, rel.ContinentY, rel.X, rel.Y}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Y = o.ContinentX
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XDungeons: related,
		}
	} else {
		o.R.XDungeons = append(o.R.XDungeons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dungeonR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXDungeons adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XDungeons.
// Sets related.R.X appropriately.
func (o *Tile) AddXDungeons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dungeon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Y = o.ContinentY
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dungeons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"y"}),
				strmangle.WhereClause("\"", "\"", 2, dungeonPrimaryKeyColumns),
			)
			values := []interface{}{o.ContinentY, rel.ContinentX, rel.ContinentY, rel.X, rel.Y}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Y = o.ContinentY
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XDungeons: related,
		}
	} else {
		o.R.XDungeons = append(o.R.XDungeons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dungeonR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXDungeons adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XDungeons.
// Sets related.R.X appropriately.
func (o *Tile) AddXDungeons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dungeon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentX = o.X
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dungeons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_x"}),
				strmangle.WhereClause("\"", "\"", 2, dungeonPrimaryKeyColumns),
			)
			values := []interface{}{o.X, rel.ContinentX, rel.ContinentY, rel.X, rel.Y}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentX = o.X
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XDungeons: related,
		}
	} else {
		o.R.XDungeons = append(o.R.XDungeons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dungeonR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXDungeons adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XDungeons.
// Sets related.R.X appropriately.
func (o *Tile) AddXDungeons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dungeon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentX = o.Y
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dungeons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_x"}),
				strmangle.WhereClause("\"", "\"", 2, dungeonPrimaryKeyColumns),
			)
			values := []interface{}{o.Y, rel.ContinentX, rel.ContinentY, rel.X, rel.Y}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentX = o.Y
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XDungeons: related,
		}
	} else {
		o.R.XDungeons = append(o.R.XDungeons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dungeonR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXDungeons adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XDungeons.
// Sets related.R.X appropriately.
func (o *Tile) AddXDungeons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dungeon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentX = o.ContinentX
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dungeons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_x"}),
				strmangle.WhereClause("\"", "\"", 2, dungeonPrimaryKeyColumns),
			)
			values := []interface{}{o.ContinentX, rel.ContinentX, rel.ContinentY, rel.X, rel.Y}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentX = o.ContinentX
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XDungeons: related,
		}
	} else {
		o.R.XDungeons = append(o.R.XDungeons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dungeonR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXDungeons adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XDungeons.
// Sets related.R.X appropriately.
func (o *Tile) AddXDungeons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dungeon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentX = o.ContinentY
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dungeons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_x"}),
				strmangle.WhereClause("\"", "\"", 2, dungeonPrimaryKeyColumns),
			)
			values := []interface{}{o.ContinentY, rel.ContinentX, rel.ContinentY, rel.X, rel.Y}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentX = o.ContinentY
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XDungeons: related,
		}
	} else {
		o.R.XDungeons = append(o.R.XDungeons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dungeonR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXDungeons adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XDungeons.
// Sets related.R.X appropriately.
func (o *Tile) AddXDungeons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dungeon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentY = o.X
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dungeons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_y"}),
				strmangle.WhereClause("\"", "\"", 2, dungeonPrimaryKeyColumns),
			)
			values := []interface{}{o.X, rel.ContinentX, rel.ContinentY, rel.X, rel.Y}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentY = o.X
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XDungeons: related,
		}
	} else {
		o.R.XDungeons = append(o.R.XDungeons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dungeonR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXDungeons adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XDungeons.
// Sets related.R.X appropriately.
func (o *Tile) AddXDungeons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dungeon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentY = o.Y
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dungeons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_y"}),
				strmangle.WhereClause("\"", "\"", 2, dungeonPrimaryKeyColumns),
			)
			values := []interface{}{o.Y, rel.ContinentX, rel.ContinentY, rel.X, rel.Y}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentY = o.Y
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XDungeons: related,
		}
	} else {
		o.R.XDungeons = append(o.R.XDungeons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dungeonR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXDungeons adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XDungeons.
// Sets related.R.X appropriately.
func (o *Tile) AddXDungeons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dungeon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentY = o.ContinentX
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dungeons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_y"}),
				strmangle.WhereClause("\"", "\"", 2, dungeonPrimaryKeyColumns),
			)
			values := []interface{}{o.ContinentX, rel.ContinentX, rel.ContinentY, rel.X, rel.Y}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentY = o.ContinentX
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XDungeons: related,
		}
	} else {
		o.R.XDungeons = append(o.R.XDungeons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dungeonR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// AddXDungeons adds the given related objects to the existing relationships
// of the tile, optionally inserting them as new records.
// Appends related to o.R.XDungeons.
// Sets related.R.X appropriately.
func (o *Tile) AddXDungeons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Dungeon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContinentY = o.ContinentY
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"dungeons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"continent_y"}),
				strmangle.WhereClause("\"", "\"", 2, dungeonPrimaryKeyColumns),
			)
			values := []interface{}{o.ContinentY, rel.ContinentX, rel.ContinentY, rel.X, rel.Y}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContinentY = o.ContinentY
		}
	}

	if o.R == nil {
		o.R = &tileR{
			XDungeons: related,
		}
	} else {
		o.R.XDungeons = append(o.R.XDungeons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &dungeonR{
				X: o,
			}
		} else {
			rel.R.X = o
		}
	}
	return nil
}

// Tiles retrieves all the records using an executor.
func Tiles(mods ...qm.QueryMod) tileQuery {
	mods = append(mods, qm.From("\"tiles\""))
	return tileQuery{NewQuery(mods...)}
}

// FindTile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTile(ctx context.Context, exec boil.ContextExecutor, x int16, y int16, continentX int16, continentY int16, selectCols ...string) (*Tile, error) {
	tileObj := &Tile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tiles\" where \"x\"=$1 AND \"y\"=$2 AND \"continent_x\"=$3 AND \"continent_y\"=$4", sel,
	)

	q := queries.Raw(query, x, y, continentX, continentY)

	err := q.Bind(ctx, exec, tileObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tiles")
	}

	return tileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tiles provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tileInsertCacheMut.RLock()
	cache, cached := tileInsertCache[key]
	tileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tileColumns,
			tileColumnsWithDefault,
			tileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tileType, tileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tileType, tileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tiles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tiles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tiles")
	}

	if !cached {
		tileInsertCacheMut.Lock()
		tileInsertCache[key] = cache
		tileInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Tile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tileUpdateCacheMut.RLock()
	cache, cached := tileUpdateCache[key]
	tileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tileColumns,
			tilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tiles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tiles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tileType, tileMapping, append(wl, tilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tiles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tiles")
	}

	if !cached {
		tileUpdateCacheMut.Lock()
		tileUpdateCache[key] = cache
		tileUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tiles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tiles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tiles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tilePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tile")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Tile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tiles provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tileUpsertCacheMut.RLock()
	cache, cached := tileUpsertCache[key]
	tileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tileColumns,
			tileColumnsWithDefault,
			tileColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tileColumns,
			tilePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert tiles, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tilePrimaryKeyColumns))
			copy(conflict, tilePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tiles\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tileType, tileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tileType, tileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tiles")
	}

	if !cached {
		tileUpsertCacheMut.Lock()
		tileUpsertCache[key] = cache
		tileUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Tile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Tile provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tilePrimaryKeyMapping)
	sql := "DELETE FROM \"tiles\" WHERE \"x\"=$1 AND \"y\"=$2 AND \"continent_x\"=$3 AND \"continent_y\"=$4"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tiles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tiles")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tiles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tiles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Tile slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(tileBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tiles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tilePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tiles")
	}

	if len(tileAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTile(ctx, exec, o.X, o.Y, o.ContinentX, o.ContinentY)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tiles\".* FROM \"tiles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TileSlice")
	}

	*o = slice

	return nil
}

// TileExists checks if the Tile row exists.
func TileExists(ctx context.Context, exec boil.ContextExecutor, x int16, y int16, continentX int16, continentY int16) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tiles\" where \"x\"=$1 AND \"y\"=$2 AND \"continent_x\"=$3 AND \"continent_y\"=$4 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, x, y, continentX, continentY)
	}

	row := exec.QueryRowContext(ctx, sql, x, y, continentX, continentY)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tiles exists")
	}

	return exists, nil
}
